defaultStorageMapping: DWH
jobs:
  Job-65:
    excludeSelector: ""
    id: 65
    includeSelector: "+{ name: DS_CUSTOMER_01_* }"
    name: Customer_01
    steps: []
    subgraphs: []
  Job-66:
    excludeSelector: ""
    id: 66
    includeSelector: "+{ name: DS_CUSTOMER_02_* }"
    name: Customer_02
    steps: []
    subgraphs: []
  Job-67:
    excludeSelector: ""
    id: 67
    includeSelector: "+{ name: DS_CUSTOMER_03_* }"
    name: Customer_03
    steps: []
    subgraphs: []
  Job-68:
    excludeSelector: ""
    id: 68
    includeSelector: "+{ name: DS_CUSTOMER_04_* }"
    name: Customer_04
    steps: []
    subgraphs: []
  Job-69:
    excludeSelector: ""
    id: 69
    includeSelector: "+{ name: DS_CUSTOMER_05_* }"
    name: Customer_05
    steps: []
    subgraphs: []
  Job-70:
    excludeSelector: ""
    id: 70
    includeSelector: "+{ name: DS_CUSTOMER_06_* }"
    name: Customer_06
    steps: []
    subgraphs: []
  Job-71:
    excludeSelector: ""
    id: 71
    includeSelector: "+{ name: DS_CUSTOMER_07_* }"
    name: Customer_07
    steps: []
    subgraphs: []
  Job-72:
    excludeSelector: ""
    id: 72
    includeSelector: "+{ name: DS_CUSTOMER_08_* }"
    name: Customer_08
    steps: []
    subgraphs: []
  Job-73:
    excludeSelector: ""
    id: 73
    includeSelector: "+{ name: DS_CUSTOMER_09_* }"
    name: Customer_09
    steps: []
    subgraphs: []
  Job-74:
    excludeSelector: ""
    id: 74
    includeSelector: "+{ name: DS_CUSTOMER_10_* }"
    name: Customer_10
    steps: []
    subgraphs: []
locations:
  DWH:
    mappingDefinitions:
      "10":
        database: DOUG_DB
        schema: QA_DWH
      "12":
        database: DOUG_DB
        schema: QA_DWH
      "14":
        database: DOUG_DB
        schema: QA_SCALE_DWH
      "3":
        database: DOUG_DB
        schema: QA_SCALE_DWH
      "7":
        database: DOUG_DB
        schema: PROD_EDW
  SRC_FIVETRAN_RETAIL:
    mappingDefinitions:
      "14":
        database: FIVETRAN_DATABASE
        schema: RETAIL_DATA
      "3":
        database: FIVETRAN_DATABASE
        schema: RETAIL_DATA
  SRC_SAMPLE:
    mappingDefinitions:
      "14":
        database: SNOWFLAKE_SAMPLE_DATA
        schema: TPCH_SF1
      "3":
        database: DOUG_DB
        schema: WSRC
  SRC_WEATHER:
    mappingDefinitions:
      "14":
        database: COALESCE_SAMPLE_DATABASE
        schema: WEATHER
      "3":
        database: COALESCE_SAMPLE_DATABASE
        schema: WEATHER
  STAGE:
    mappingDefinitions:
      "10":
        database: DOUG_DB
        schema: QA_STG
      "12":
        database: DOUG_DB
        schema: QA_STG
      "14":
        database: DOUG_DB
        schema: QA_SCALE_STG
      "3":
        database: DOUG_DB
        schema: QA_SCALE_STG
      "7":
        database: DOUG_DB
        schema: PROD_STG
macros:
  Macro-1:
    id: "1"
    macroString: |
      {%- macro row_number(order_by, partition_by=[], order='') -%}
          ROW_NUMBER() OVER (
              {%- for p_col in partition_by %}
                  {%- if loop.first %} PARTITION BY {% endif %}
                      {{- p_col -}}
                  {%- if not loop.last %}, {% endif -%}
              {%- endfor -%}

              {%- for o_col in order_by -%}
                  {%- if loop.first %} ORDER BY {% endif -%}
                      {{- o_col -}}
                  {%- if not loop.last %}, {% endif -%}
              {%- endfor -%}

              {% if order != '' %} {{order}}{%- endif %} )
      {%- endmacro -%}



      {%- macro hash(columns, algo='MD5', delimiter='||', length=32) -%}
          {%  for column in columns %}
              {%- if loop.first %}CAST( {{ algo }}({% endif -%}
                  NVL(CAST({{ column }} AS VARCHAR), 'null')
              {%- if not loop.last %} || {% if delimiter != '' %} '{{ delimiter }}' || {% endif -%} {% endif -%}
              {%- if loop.last %}) AS CHAR({{ length }}) ){% endif -%}
          {%  endfor %}
      {%- endmacro -%}


      {%- macro even_odd(column) -%}
          CASE WHEN MOD({{ column }}, 2) = 0 THEN 'EVEN' ELSE 'ODD' END
      {%- endmacro %}
packages: {}
projects: {}
stepTypes:
  StepType-10:
    id: "10"
    isDisabled: false
    metadata:
      defaultStorageLocation: DWH
      error: null
      nodeMetadataSpec: |
        capitalized: Hub User-Defined
        short: 'HUB'
        plural: 'Hubs'

        tagColor: '#92712E'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            options: 
            - table
            - view
            - HH
            default: table

          - displayName: Hub Hash Column
            type: columnSelector
            attributeName: isHubHash
            isRequired: true

          - type: multisourceToggle
          
        - groupName: Pre/Post SQL
          items:
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            isRequired: false

        systemColumns:
        - displayName: "LOAD_DATE"
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: "RECORD_SOURCE"
          transform: "''"
          dataType: VARCHAR
          placement: end
          attributeName: isSystemRecordSource
      templates:
        create:
          templateString: |2
              {% if node.materializationType == 'table' %}
            				{{ stage('Create Hub Table') }}

            				CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in columns %}
            						"{{ col.name }}" {{ col.dataType }}
            						{%- if not col.nullable %} NOT NULL
            							{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            						{% endif %}
            						{%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
            						{%- if not loop.last -%}, {% endif %}
            					{% endfor %}
            				)
            				{%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}

            			{% endif %}
        run:
          templateString: |
            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}


            	{{ stage('Merge Hub') }}
            	MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT" USING
            	(
            		{% for source in sources %}
            		SELECT DISTINCT
            		{% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}

            		{{ source.join }}

            		{% if not loop.last %}
            			{{ config.insertStrategy }}
            		{% endif %}
            	{% endfor %}
            	)
            	AS "SRC"
            	ON
            	{% for col in sources[0].columns if (col.isHubHash) -%}
            		{% if not loop.first %}
            			AND
            		{% endif %}
            		"SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
            	{% endfor %}
            	WHEN NOT MATCHED THEN
            	INSERT
            	(
            		{% for col in columns %}
            			"{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	) VALUES
            	(
            		{% for col in columns %}
            			"SRC"."{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)


            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}

            {% endif %}
    name: Hub
    version: 1
  StepType-100:
    id: "100"
    isDisabled: true
    metadata:
      defaultStorageLocation: STAGE
      error: null
      nodeMetadataSpec: |
        capitalized: Task DAG Root Resume
        short: TGRR
        tagColor: green
        plural: none

        deployStrategy: advanced

        config:
        - groupName: Sceduling Options
          items:
          - displayName: Enter root task name
            attributeName: rootTask
            type: textBox
            default: '"DATA_TRANSFORMATION_ROOT_TASK"'
            isRequired: TRUE

        - groupName: "Pre/Post SQL"
          items: 
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: DAG_RESUME_TIMESTAMP
          transform: current_timestamp()::timestamp_ntz
          dataType: timestamp_ntz
          placement: start
          attributeName: dagResumeTS

        - displayName: DAG_ROOT_TASK_NAME
          transform: desiredState.config.rootTask
          dataType: string
          placement: start
          attributeName: dagResumeTS
      templates:
        create:
          templateString: |
            {# Task Info #}
            {% set tgtDb = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[0] %} 
            {% set tgtSch = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[1] %} 
            {%- set fqRootTaskName = tgtDb + '.' + tgtSch + '.' + desiredState.config.rootTask -%} 

            {{ stage('Try Enable Root Task') }}
            begin
                let sqlDml := 'select system$task_dependents_enable(''{{fqRootTaskName}}'')';
                execute immediate sqlDml;
                return 'Task resumed';
                    exception
                    when statement_error then
                        return 'Task already running';
            end;
        run:
          templateString: ""
    name: Task DAG Resume Root
    version: 1
  StepType-101:
    id: "101"
    isDisabled: true
    metadata:
      defaultStorageLocation: STAGE
      error: null
      nodeMetadataSpec: |-
        capitalized: Copy of Copy of Stream and Insert or Merge
        short: SIM
        tagColor: black
        plural: Streams and Merges

        deployStrategy: advanced

        config:
        - groupName: Stream Options
          items:
          - displayName: Append Only Stream
            attributeName: appendOnly
            type: toggleButton
            default: true
            isRequired: true

          - displayName: Show Initial Rows
            attributeName: initialRows
            type: toggleButton
            default: true
            isRequired: true

        - groupName: Target Loading Options
          items:
          - displayName: Load Type
            attributeName: loadType
            type: dropdownSelector
            default: Insert
            options:
              - Insert
              - Merge
            isRequired: true

          - displayName: Table Key Column(s)
            attributeName: tblKey
            type: columnSelector
            isRequired: false
            enableIf: "{% if config.loadType == 'Merge' %} true {% else %} false {% endif %}"

          - displayName: Row Update Timestamp Column
            attributeName: tblChgTS
            type: columnSelector
            isRequired: false
            enableIf: "{% if config.loadType == 'Merge' %} true {% else %} false {% endif %}"
         
        - groupName: Sceduling Options
          items:
          - displayName: Sceduling Options
            attributeName: schedulingMode
            type: dropdownSelector
            default: Warehouse Task
            options:
              - Warehouse Task
              - Serverless Task
            isRequired: true

          - displayName: When Source Stream has Data Flag
            attributeName: flagSrcStream
            type: toggleButton
            isRequired: true

          - displayName: Select Warehouse on which to run task
            attributeName: whName
            type: textBox
            default: '<WAREHOUSE_NAME>'
            isRequired: false
            enableIf: "{% if config.schedulingMode == 'Warehouse Task' %} true {% else %} false {% endif %}"

          - displayName: Select initial serverless Warehouse size
            attributeName: serverlessSize
            type: dropdownSelector
            default: 'MEDIUM'
            options:
              - XSMALL
              - SMALL
              - MEDIUM
              - LARGE
              - XLARGE
              - XXLARGE
            isRequired: false
            enableIf: "{% if config.schedulingMode == 'Serverless Task' %} true {% else %} false {% endif %}"

          - displayName: Task Schedule
            attributeName: schedulePeriodOption
            type: dropdownSelector
            default: Minutes
            options:
              - Minutes
              - CRON
              - Predecessor
            isRequired: TRUE

          - displayName: Enter task schedule using minutes
            attributeName: schedulePeriod
            type: textBox
            default: '60'
            isRequired: false
            enableIf: "{% if config.schedulePeriodOption == 'Minutes' %} true {% else %} false {% endif %}"

          - displayName: Enter task schedule using CRON
            attributeName: scheduleCRON
            type: textBox
            default: '5 0-23 * * * America/Los_Angeles'
            isRequired: false
            enableIf: "{% if config.schedulePeriodOption == 'CRON' %} true {% else %} false {% endif %}"

          - displayName: Enter predecessor task(s) seperated by a comma 
            attributeName: predTask
            type: textBox
            default: ""
            isRequired: false
            enableIf: "{% if config.schedulePeriodOption == 'Predecessor' %} true {% else %} false {% endif %}"

          - displayName: Enter root task name
            attributeName: rootTask
            type: textBox
            default: ""
            isRequired: false
            enableIf: "{% if config.schedulePeriodOption == 'Predecessor' %} true {% else %} false {% endif %}"

        - groupName: "Pre/Post SQL"
          items: 
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false
      templates:
        create:
          templateString: |+
            {% if (currentState == undefined and desiredState != undefined) or (currentState != undefined and desiredState != undefined ) %}

            {# Source Stream Location and Name #}
            {% set srcSchName = desiredState.sources[0].dependencies[0].node.location.name %}
            {% set srcDb = desiredState.storageLocations | selectattr('name', 'equalto', srcSchName) | map(attribute='database') | first %}
            {% set srcSch = desiredState.storageLocations | selectattr('name', 'equalto', srcSchName) | map(attribute='schema') | first %}
            {% set srcTbl = desiredState.sources[0].dependencies[0].node.name %}
            {% set strName = srcTbl + '_STREAM' %}
            {% set fqSrcTblName = '"' + srcDb + '"."' + srcSch + '"."' + srcTbl + '"' %}
            {% set fqStrName = '"' + srcDb + '"."' + srcSch + '"."' + strName + '"' %}
            {% set strFrom = desiredState.sources[0].join | replace(srcTbl, strName) %}

            {# Target Table Info #}
            {% set tgtDb = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[0] %} 
            {% set tgtSch = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[1] %} 
            {% set tgtTbl = ref_no_link(desiredState.node.location.name, desiredState.node.name) %}

            {# Task Info #}
            {% set taskName = desiredState.node.name + '_TASK'  %}
            {%- set fqTaskName = tgtDb + '.' + tgtSch + '."' + taskName + '"' -%} 

            {% set rootTaskName = tgtDb + '.' + tgtSch + '."' + desiredState.config.rootTask + '"' %}
            {% set predTaskList = desiredState.config.predTask.split(",") %}
            {% set predTasks = tgtDb + '.' + tgtSch + '.' + desiredState.config.predTask.replace(',', ',' + tgtDb + '.' + tgtSch + '.') %}

            {% set tblColid = desiredState.columns | map(attribute='id') | list %}
            {% set tblCol = desiredState.columns | map(attribute='name') | list %}
            {% set tblKey = desiredState.columns | selectattr('tblKey', 'defined') | map(attribute='name') | list %}
            {% set tblColUpd = tblCol | reject('in', tblKeys) | list %}
            {%- set tblKeyColStr = '"'+tblKey | join('", "')+'"' -%}
            {% set recTS = desiredState.columns | selectattr('tblChgTS', 'defined') | map(attribute='name') | first %}

            {{ stage('Create Stream') }}
            CREATE OR REPLACE STREAM {{ fqStrName }}
                ON TABLE {{ fqSrcTblName }}
                APPEND_ONLY = {% if desiredState.config.appendOnly == true %} TRUE {% else %} FALSE {% endif %}
                SHOW_INITIAL_ROWS = {% if desiredState.config.initialRows == true %} TRUE {% else %} FALSE {% endif %}

                
            {{ stage('Create Target Table') }}
            CREATE OR REPLACE TABLE {{ tgtTbl }}
                (
                {%- for col in desiredState.columns %}
                        "{{ col.name }}" {{ col.dataType }}
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                {%- endfor %}
                )

            {%- if desiredState.config.schedulePeriodOption == 'Predecessor' -%} 
                {{ stage('Suspend Root Task') }}
                ALTER TASK {{ rootTaskName }} SUSPEND
            {%- endif -%}

            {{ stage('Create Task') }}
                {# Task Type #}
                {%- if desiredState.config.schedulingMode == 'Warehouse Task' -%} 
                    {%- set taskType = 'WAREHOUSE = ' + desiredState.config.whName -%} 
                {%- else -%}
                    {%- set taskType = 'USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE = ' + desiredState.config.serverlessSize -%} 
                {%- endif -%}

                {# Schedule Type #}
                {%- if desiredState.config.schedulePeriodOption == 'Minutes' -%} 
                    {%- set whenRun = 'SCHEDULE = ' + "'" + desiredState.config.schedulePeriod + ' MINUTE' + "'" -%} 
                {% elif desiredState.config.schedulePeriodOption == 'CRON' %}
                    {%- set whenRun = 'SCHEDULE = ' + "'" + 'USING CRON ' + desiredState.config.scheduleCRON %}
                {%- else -%}
                    {%- set whenRun = 'AFTER ' + predTasks -%} 
                {%- endif -%}

                {# When Stream has data logic #}
                {%- if desiredState.config.flagSrcStream == true -%} 
                    {%- set poll = "WHEN SYSTEM$STREAM_HAS_DATA('" + fqStrName + "')" -%} 
                {%- endif -%}
                
                CREATE OR REPLACE TASK 
                    {{ fqTaskName }} 
                    {{ taskType}} 
                    {{ whenRun }} 
                    {{ poll }} 
                AS 
                {% if desiredState.config.loadType == 'Insert' -%} 
                INSERT INTO {{ tgtTbl }}
                SELECT {% for id in tblColid %}
                        {% set col = desiredState.sources[0].columns | selectattr('id', 'equalto', id) | map(attribute='name') | first -%}
                        {% set colTran = desiredState.sources[0].columns | selectattr('id', 'equalto', id) | map(attribute='transform') | first -%}
                        {%- if colTran == "" -%}
                          "{{ col }}" as "{{ col }}" {%- if not loop.last -%}, {%- endif -%}
                        {%- else -%}
                          {{ colTran | replace(srcTbl, strName) }} as "{{ col }}" {%- if not loop.last -%}, {%- endif -%}
                        {%- endif %}
                    {%- endfor %}
                 {{ strFrom }}
                {% else -%}
                MERGE INTO {{ tgtTbl }} tgt USING
                -- Select Statement Preparing Data for Merge
                (SELECT {% for id in tblColid %}
                        {% set col = desiredState.sources[0].columns | selectattr('id', 'equalto', id) | map(attribute='name') | first -%}
                        {% set colTran = desiredState.sources[0].columns | selectattr('id', 'equalto', id) | map(attribute='transform') | first -%}
                        {%- if colTran == "" -%}
                          "{{ col }}" as "{{ col }}" {%- if not loop.last -%}, {%- endif -%}
                        {%- else -%}
                          {{ colTran | replace(srcTbl, strName) }} as "{{ col }}" {%- if not loop.last -%}, {%- endif -%}
                        {%- endif %}
                    {%- endfor %}
                 {{ strFrom }}
                 QUALIFY ROW_NUMBER() over (partition by {{ tblKeyColStr }} order by 
                {% if recTS | length > 0 %}
                    "{{ recTS }}" desc
                {% else %}
                    "METADATA$ROW_ID" desc
                {% endif %}
                ) = 1) src
                 -- Join Condition
                 ON {% for col in tblKey -%}
                     src."{{ col }}" = tgt."{{ col }}"
                {% if not loop.last %} AND {% endif %}
                    {%- endfor -%}
                -- What to do if data is matched based on table key
                WHEN MATCHED THEN UPDATE SET 
                    {%- for col in tblColUpd %}
                            tgt."{{ col }}" = src."{{ col }}"
                            {%- if not loop.last -%}, {%- endif %}
                    {%- endfor %}
                -- What to do with new records based on table key
                WHEN NOT MATCHED THEN INSERT 
                    (
                    {%- for col in desiredState.columns -%}
                            "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                    {% endfor %}) 
                VALUES (
                    {%- for col in desiredState.columns -%}
                            src."{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                    {% endfor %})
                {%- endif -%}

            {{ stage('Resume Task') }}
            {%- if desiredState.config.schedulePeriodOption == 'Predecessor' -%} 
                select system$task_dependents_enable('{{ rootTaskName }}');
            {%- else -%}
                ALTER TASK {{ fqTaskName }} RESUME;
            {%- endif -%}

            {% elif currentState != undefined and desiredState == undefined %}

            {# Source Stream Location and Name #}
            {% set srcSchName = currentState.sources[0].dependencies[0].node.location.name %}
            {% set srcDb = currentState.storageLocations | selectattr('name', 'equalto', srcSchName) | map(attribute='database') | first %}
            {% set srcSch = currentState.storageLocations | selectattr('name', 'equalto', srcSchName) | map(attribute='schema') | first %}
            {% set srcTbl = currentState.sources[0].dependencies[0].node.name %}
            {% set strName = srcTbl + '_STREAM' %}
            {% set fqSrcTblName = '"' + srcDb + '"."' + srcSch + '"."' + srcTbl + '"' %}
            {% set fqStrName = '"' + srcDb + '"."' + srcSch + '"."' + strName + '"' %}
            {% set strFrom = currentState.sources[0].join | replace(srcTbl, strName) %}

            {# Target Table Info #}
            {% set tgtDb = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[0] %} 
            {% set tgtSch = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[1] %} 
            {% set tgtTbl = ref_no_link(currentState.node.location.name, currentState.node.name) %}

            {# Task Info #}
            {% set taskName = currentState.node.name + '_TASK'  %}
            {%- set fqTaskName = tgtDb + '.' + tgtSch + '."' + taskName + '"' -%} 

            {% set tblColid = currentState.columns | map(attribute='id') | list %}
            {% set tblCol = currentState.columns | map(attribute='name') | list %}
            {% set tblKey = currentState.columns | selectattr('tblKey', 'defined') | map(attribute='name') | list %}
            {% set tblColUpd = tblCol | reject('in', tblKeys) | list %}
            {%- set tblKeyColStr = '"'+tblKey | join('", "')+'"' -%}
            {% set recTS = currentState.columns | selectattr('tblChgTS', 'defined') | map(attribute='name') | first %}

            {{ stage('Drop Stream') }}
            DROP STREAM IF EXISTS {{ fqStrName }}
            {{ stage('Drop Table') }}
            DROP TABLE IF EXISTS {{ tgtTbl }}

            {%- if desiredState.config.schedulingPeriodOption == 'Predecessor' -%} 
            {{ stage('Suspend Root Task') }}
                ALTER TASK IF EXISTS {{ rootTaskName }} SUSPEND
            {{ stage('Drop Current Task Task') }}
                DROP TASK IF EXISTS {{ fqTaskName }} 
            {{ stage('Resume Root Task') }}
                select system$task_dependents_enable('{{ rootTaskName }}');
            {%- else -%}
                DROP TASK IF EXISTS {{ fqTaskName }} 
            {%- endif -%}

            {%- else -%}

            {{ stage('Nothing to do.') }}
            select 1 = 0

            {% endif %}

        run:
          templateString: |-
            {# Source Stream Location and Name #}
            {% set srcSchName = desiredState.sources[0].dependencies[0].node.location.name %}
            {% set srcDb = desiredState.storageLocations | selectattr('name', 'equalto', srcSchName) | map(attribute='database') | first %}
            {% set srcSch = desiredState.storageLocations | selectattr('name', 'equalto', srcSchName) | map(attribute='schema') | first %}
            {% set srcTbl = desiredState.sources[0].dependencies[0].node.name %}
            {% set strName = srcTbl + '_STREAM' %}
            {% set fqSrcTblName = '"' + srcDb + '"."' + srcSch + '"."' + srcTbl + '"' %}
            {% set fqStrName = '"' + srcDb + '"."' + srcSch + '"."' + strName + '"' %}
            {% set strFrom = desiredState.sources[0].join | replace(srcTbl, strName) %}

            {# Target Table Info #}
            {% set tgtDb = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[0] %} 
            {% set tgtSch = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[1] %} 
            {% set tgtTbl = ref_no_link(desiredState.node.location.name, desiredState.node.name) %}

            {# Task Info #}
            {% set taskName = desiredState.node.name + '_TASK'  %}
            {%- set fqTaskName = tgtDb + '.' + tgtSch + '."' + taskName + '"' -%} 

            {% set tblColid = desiredState.columns | map(attribute='id') | list %}
            {% set tblCol = desiredState.columns | map(attribute='name') | list %}
            {% set tblKey = desiredState.columns | selectattr('tblKey', 'defined') | map(attribute='name') | list %}
            {% set tblColUpd = tblCol | reject('in', tblKeys) | list %}
            {%- set tblKeyColStr = '"'+tblKey | join('", "')+'"' -%}
            {% set recTS = desiredState.columns | selectattr('tblChgTS', 'defined') | map(attribute='name') | first %}

            {{ stage('Create Stream') }}
            CREATE OR REPLACE STREAM {{ fqStrName }}
                ON TABLE {{ fqSrcTblName }}
                APPEND_ONLY = {% if desiredState.config.appendOnly == true %} TRUE {% else %} FALSE {% endif %}
                SHOW_INITIAL_ROWS = {% if desiredState.config.initialRows == true %} TRUE {% else %} FALSE {% endif %}

                
            {{ stage('Create Target Table') }}
            CREATE OR REPLACE TABLE {{ tgtTbl }}
                (
                {%- for col in desiredState.columns %}
                        "{{ col.name }}" {{ col.dataType }}
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                {%- endfor %}
                )
    name: Stream and Insert or Merge Predecessor - Advanced
    version: 1
  StepType-102:
    id: "102"
    isDisabled: false
    metadata:
      defaultStorageLocation: STAGE
      error: null
      nodeMetadataSpec: |-
        capitalized: INCREMENTAL
        short: INC
        plural: Incremental
        tagColor: green

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            default: view
            options:
            - view
            isRequired: true
            enableIf: "false"

          - displayName: Filter data based on Persistent Table
            attributeName: refTable
            type: toggleButton
            default: false
            isRequired: false

          - displayName: Persistent Table based on prefix
            attributeName: persistTable
            type: dropdownSelector
            default: ""
            options:
            - ""
            - "DS"
            - "DIM"
            - "FCT"
            - "SAT"
            - "PSTG"
            isRequired: false
            enableIf: "{{config.refTable}}"

          - displayName: Persistent Table location
            attributeName: persistTableLocation
            type: dropdownSelector
            default: "DWH"
            options:
            - "DWH"
            - "STAGE"
            isRequired: false
            enableIf: "{{config.refTable}}"

          - displayName: Persistent Table name if not selected above
            attributeName: persistTableName
            type: textBox
            default: ""
            isRequired: false
            enableIf: "{{config.refTable}}"
      templates:
        create:
          templateString: |
            {% set base = node.name | replace("INC", "") %}
            {% if config.persistTableName | length > 0 %}
                {% set persist = config.persistTableName %}
            {% else %}
                {% set persist = config.persistTable + base %}
            {% endif %}
            {% set source = sources[0] %}


            {{ stage('Create Stage View') }}

            CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
            (
                {% for col in columns if col.name != "_SEQUENCE" %}
                    "{{ col.name }}"
                    {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                    {% if not loop.last %}, {% endif %}
                {% endfor %}
            )
            {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
            AS
            SELECT
            {% for col in source.columns  %}
                {{ get_source_transform(col) }} AS  "{{ col.name }}" 
                {%- if not loop.last -%}, {% endif %} 
            {% endfor %}

            {{ source.join }}

            {% if config.refTable and persist | length > 0  %}
                {% if "WHERE" in source.join | upper %}
                    AND
                {% else %}
                    WHERE 
                {% endif %}
                _FIVETRAN_SYNCED > (SELECT NVL(MAX(_FIVETRAN_SYNCED), '1900-01-01') 
                                    FROM {{ref(config.persistTableLocation, persist)}} )
            {% endif %}
        run:
          templateString: ""
    name: Fivetran Incremental
    version: 1
  StepType-11:
    id: "11"
    isDisabled: false
    metadata:
      defaultStorageLocation: DWH
      error: null
      nodeMetadataSpec: |
        capitalized: Link User-Defined
        short: 'LNK'
        plural: 'Links'
        tagColor: '#CA2287'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table

          - displayName: Insert Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: UNION
            options:
            - "UNION"
            - "UNION ALL"
            isRequired: true
          
          - displayName: Link Hash Column
            type: columnSelector
            attributeName: isLinkHash
            isRequired: true

        - groupName: Pre/Post SQL
          items:
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            isRequired: false

        systemColumns:
        - displayName: "LOAD_DATE"
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: "RECORD_SOURCE"
          transform: "''"
          dataType: VARCHAR
          placement: end
          attributeName: isSystemRecordSource
      templates:
        create:
          templateString: |
            {% if node.materializationType == 'table' %}
                           {{ stage('Create Link Table') }}
             
                           CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
                           (
                               {% for col in columns %}
                                   "{{ col.name }}" {{ col.dataType }}
                                   {%- if not col.nullable %} NOT NULL
                                       {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                                   {% endif %}
                                   {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                                   {%- if not loop.last -%}, {% endif %}
                               {% endfor %}
                           )
                           {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
             
                       {% endif %}
        run:
          templateString: |
            {% if node.materializationType == 'table' %}
               {% if config.preSQL %}
                   {{ stage('Pre-SQL') }}
                   {{ config.preSQL }}
              
               {% endif %}
             
                      
               {{ stage('Merge Link') }}
               MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT" USING
               (
                   {% for source in sources %}
                   SELECT
                   {% for col in source.columns %}
                       {{ get_source_transform(col) }} AS "{{ col.name }}"
                       {%- if not loop.last -%}, {% endif %}
                   {% endfor %}
             
                   {{ source.join }}
             
                   {% if not loop.last %}
                       {{ config.insertStrategy }}
                   {% endif %}
               {% endfor %}
               )
               AS "SRC"
               ON
               {% for col in sources[0].columns if (col.isLinkHash) -%}
                   {% if not loop.first %}
                       AND
                   {% endif %}
                   "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
               {% endfor %}
               WHEN NOT MATCHED THEN
               INSERT
               (
                   {% for col in columns %}
                       "{{ col.name }}"
                       {%- if not loop.last -%}, {% endif %}
                   {% endfor %}
               ) VALUES
               (
                   {% for col in columns %}
                       "SRC"."{{ col.name }}"
                       {%- if not loop.last -%}, {% endif %}
                   {% endfor %}
               )
             
               {% if config.postSQL %}
                   {{ stage('Post-SQL') }}
                   {{ config.postSQL }}   
               {% endif %}
            {% endif %}
    name: Link
    version: 1
  StepType-111:
    id: "111"
    isDisabled: false
    metadata:
      defaultStorageLocation: STAGE
      error: null
      nodeMetadataSpec: |-
        capitalized: INCREMENTAL
        short: INC
        plural: Incremental
        tagColor: green

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            default: view
            options:
            - view
            isRequired: true
            enableIf: "false"

          - displayName: Filter data based on Persistent Table
            attributeName: refTable
            type: toggleButton
            default: false
            isRequired: false

          - displayName: Persistent Table based on prefix
            attributeName: persistTable
            type: dropdownSelector
            default: ""
            options:
            - ""
            - "DS"
            - "DIM"
            - "FCT"
            - "SAT"
            - "PSTG"
            isRequired: false
            enableIf: "{{config.refTable}}"

          - displayName: Persistent Table name if not selected above
            attributeName: persistTableName
            type: textBox
            default: ""
            isRequired: false
            enableIf: "{{config.refTable}}"
      templates:
        create:
          templateString: |
            {% set base = node.name | replace("INC", "") %}
            {% if config.persistTableName | length > 0 %}
                {% set persist = config.persistTableName %}
            {% else %}
                {% set persist = config.persistTable + base %}
            {% endif %}
            {% set source = sources[0] %}


            {{ stage('Create Stage View') }}

            CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
            (
                {% for col in columns if col.name != "_SEQUENCE" %}
                    "{{ col.name }}"
                    {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                    {% if not loop.last %}, {% endif %}
                {% endfor %}
            )
            {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
            AS
            SELECT
            {% for col in source.columns  %}
                {{ get_source_transform(col) }} AS  "{{ col.name }}" 
                {%- if not loop.last -%}, {% endif %} 
            {% endfor %}

            {{ source.join }}

            {% if config.refTable and persist | length > 0  %}
                {% if "WHERE" in source.join | upper %}
                    AND
                {% else %}
                    WHERE 
                {% endif %}
                CDC_TIMESTAMP > (SELECT NVL(MAX(CDC_TIMESTAMP), '1900-01-01') FROM {{ref('DWH', persist)}} )
            {% endif %}
        run:
          templateString: ""
    name: CDC Incremental
    version: 1
  StepType-12:
    id: "12"
    isDisabled: false
    metadata:
      defaultStorageLocation: DWH
      error: null
      nodeMetadataSpec: |-
        capitalized: Copy of Effectivity Satellite User-Defined
        short: 'EFF_SAT'
        plural: 'Satellites'
        tagColor: '#627DE9'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table

         
          - displayName: Link Hash Column
            type: columnSelector
            attributeName: isLinkHash
            isRequired: true

          - displayName: Driving Key Column
            type: columnSelector
            attributeName: isDrivingKey
            isRequired: true


        - groupName: Pre/Post SQL
          items:
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            isRequired: false

        systemColumns:
        - displayName: "LOAD_DATE"
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: "RECORD_SOURCE"
          transform: "''"
          dataType: VARCHAR
          placement: end
          attributeName: isSystemRecordSource
      templates:
        create:
          templateString: |2-
              {% if node.materializationType == 'table' %}
            				{{ stage('Create Effectivity Satellite Table') }}

            				CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in columns %}
            						"{{ col.name }}" {{ col.dataType }}
            						{%- if not col.nullable %} NOT NULL
            							{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            						{% endif %}
            						{%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
            						{%- if not loop.last -%}, {% endif %}
            					{% endfor %}
            				)
            				{%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}

            			{% endif %}
        run:
          templateString: |-
            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}

            	{{ stage('Insert New Rows') }}
            	INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            	WITH "SAT_CURR_ROWS" AS (
            		/* get current rows from satellite */
            		{% for col in columns if col.isDrivingKey or col.isLinkHash %}
            			{%- if loop.first -%}SELECT {% endif %} 
            			{{col.name}}
            			{%- if not loop.last -%}, {% endif %}
            			{%- if loop.last %} 
            				FROM {{ ref_no_link(node.location.name, node.name) }} 
            				QUALIFY ROW_NUMBER() OVER (PARTITION BY "{{ get_value_by_column_attribute("isDrivingKey") }}" ORDER BY "{{ get_value_by_column_attribute("isSystemCreateDate") }}" DESC) = 1
            			{% endif %}
            		{% endfor %}
            	)

            		{% for source in sources %}
            			SELECT DISTINCT
            			{% for col in source.columns %}
            				{{ get_source_transform(col) }} AS "{{ col.name }}"
            				{%- if not loop.last -%}, {% endif %}
            			{% endfor %}

            			{{ source.join }}
            		WHERE NOT EXISTS(
            			SELECT 1 FROM "SAT_CURR_ROWS"
            			WHERE 
            			{% for col in source.columns if col.isDrivingKey or col.isLinkHash %}
            				{% if not loop.first %}
            					AND
            				{% endif %}
            				{{ get_source_transform(col) }} = "SAT_CURR_ROWS"."{{ col.name }}"
            			{% endfor %}
            		)

            		{% endfor %}

            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}

            {% endif %}
    name: Satellite - Effectivity
    version: 1
  StepType-120:
    id: "120"
    isDisabled: false
    metadata:
      defaultStorageLocation: STAGE
      error: null
      nodeMetadataSpec: |
        capitalized: Stage View
        short: VSTG
        tagColor: '#C4C4C4'
        isDisabled: true
        plural: Views

        config:
          - groupName: Options
            items: 
            - type: materializationSelector
              options:
                - view
              default: view
              isRequired: true

            - type: toggleButton
              attributeName: selectDistinct
              displayName: Distinct

            - type: multisourceToggle

            - type: overrideSQLToggle

            - displayName: Multi Source Strategy
              attributeName: insertStrategy
              type: dropdownSelector
              default: UNION
              options:
              - "UNION"
              - "UNION ALL" 
              isRequired: true
              enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"
      templates:
        create:
          templateString: |
            {% if node.override.create.enabled %}
                
                {{ node.override.create.script }}

            {% else %}
                {{ stage('Create View') }}
                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                AS
                {% for source in sources %}
                    SELECT {% if config.selectDistinct %} DISTINCT {% endif %}
                    {% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

                    {{ source.join }}

                    {% if not loop.last %}
                        {% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
                            {{ config.insertStrategy }}
                        {% else %}
                            UNION
                        {% endif %}
                    {% endif %}
                {% endfor %}
            {% endif %}
        run:
          templateString: ""
    name: Stage View
    version: 1
  StepType-130:
    id: "130"
    isDisabled: false
    metadata:
      defaultStorageLocation: STAGE
      error: null
      nodeMetadataSpec: |
        capitalized: Copy of Persistent Stage
        short: DS
        plural: Persistent Stages
        tagColor: '#29B2DB'
            
        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table
            - view
          
          - type: businessKeyColumns
            isRequired: false

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}"

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:

        - displayName: '{{NODE_NAME}}_KEY'
          transform: ''
          dataType: NUMBER
          placement: beginning
          attributeName: isSurrogateKey

        - displayName: SYSTEM_VERSION
          transform: ''
          dataType: NUMBER
          placement: end
          attributeName: isSystemVersion

        - displayName: SYSTEM_CURRENT_FLAG
          transform: ''
          dataType: VARCHAR
          placement: end
          attributeName: isSystemCurrentFlag

        - displayName: SYSTEM_START_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemStartDate

        - displayName: SYSTEM_END_DATE
          transform: CAST('2999-12-31 00:00:00' AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemEndDate

        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |
            {% if node.materializationType == 'table' %}
                {{ stage('Create Persistent Stage Table') }}

                CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}" {{ col.dataType }}
                        {% if col.isSurrogateKey %}
            		        identity
                        {% endif %}
                        {%- if not col.nullable %} NOT NULL
                            {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                        {% endif %}
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}


            {% elif node.materializationType == 'view' %}
                {{ stage('Create Persistent Stage View') }}

                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%},{% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                AS
                {% for source in sources %}

            		{% if not loop.last %} UNION ALL {% endif %}
            	{% endfor %}

                    {% for col in source.columns %}
                        {% if col.isSurrogateKey or col.isSystemUpdateDate or col.isSystemCreateDate %}
                            NULL
                        {% else %}
                            {{ get_source_transform(col) }}
                        {% endif %}
                        AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                    {{ source.join }}

            {% endif %}
        run:
          templateString: |-
            {% set has_business_key = columns | selectattr("isBusinessKey") | list | length > 0 %}
            {% set is_type_2 = columns | selectattr("isChangeTracking") | list | length > 0 %}

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string ) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                            SELECT
                            {% for col in source.columns if not col.isSurrogateKey %}
                                {% if col.isSystemVersion %}
                                	1
                                {% elif col.isSystemCurrentFlag %}
                                	'Y'
                                {% else %}
                                    {{ get_source_transform(col) }}
                                {% endif %}
                                AS "{{ col.name }}"
                                {%- if not loop.last %}, {% endif %}
                            {% endfor %}
                            {{ source.join }})
                            AS "SRC"
                        ON "SRC"."C_CUSTKEY" = "TGT"."C_CUSTKEY"
                        WHEN MATCHED
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            NVL( CAST("SRC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("TGT"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        THEN UPDATE SET
                        {%- for col in source.columns if not (  col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemCreateDate) %}
                                "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor %}
                        WHEN NOT MATCHED THEN
                        INSERT (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                        VALUES (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                    {% endfor %}
                
            	
            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            	
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Customer Persistent Stage
    version: 1
  StepType-131:
    id: "131"
    isDisabled: false
    metadata:
      defaultStorageLocation: STAGE
      error: null
      nodeMetadataSpec: |
        capitalized: Stage2
        short: STG2
        plural: Stages
        tagColor: '#2EB67D'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            default: table
            options:
            - table
            - view
            isRequired: true

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}" 

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"
            
          - displayName: Multi Source Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: INSERT
            options:
            - "INSERT"
            - "UNION"
            - "UNION ALL"
            isRequired: true
            enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

          - displayName: Truncate Before
            attributeName: truncateBefore
            type: toggleButton
            default: true

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false
      templates:
        create:
          templateString: |
            {% if node.override.create.enabled %}
            	
            	{{ node.override.create.script }}

            {% elif node.materializationType == 'table' %}
            	{{ stage('Create Stage Table') }}

            	CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}" {{ col.dataType }}
            			{%- if not col.nullable %} NOT NULL
            				{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            			{% endif %}
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}


            {% elif node.materializationType == 'view' %}
                {{ stage('Create Stage View') }}

                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                AS
                {% for source in sources %}
                    SELECT
                    {% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

                    {{ source.join }}

                    {% if not loop.last %}
                        {% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
                            {{ config.insertStrategy }}
                        {% else %}
                            UNION
                        {% endif %}
                    {% endif %}
                {% endfor %}

            {% endif %}
        run:
          templateString: |2

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
            	
            	
            		{% if config.truncateBefore %}
            	
            			{{ stage('Truncate Stage Table') }}
            			TRUNCATE IF EXISTS {{ ref_no_link(node.location.name, node.name) }}
            	
            		{% endif %}
            	
            	
            		{% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
            			{{ stage( config.insertStrategy + ' Sources' | string ) }}
            			INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in columns %}
            						"{{ col.name }}"
            						{%- if not loop.last -%},{% endif %}
            					{% endfor %}
            				)
            		{% endif %}
            	
            	
            		{% for source in sources %}
            	
            			{% if config.insertStrategy == 'INSERT' %}
            				{{ stage('Insert ' + source.name | string ) }}
            	
            				INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in source.columns %}
            						"{{ col.name }}"
            						{%- if not loop.last -%},{% endif %}
            					{% endfor %}
            				)
            			{% endif %}
            	
            			SELECT
            			{% for col in source.columns %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"
            				{%- if not loop.last -%}, {% endif %}
            			{% endfor %}
            	
            			{{ source.join }}
            	
            			{% if config.insertStrategy in ['UNION', 'UNION ALL'] and not loop.last %}
            				{{config.insertStrategy}}
            			{% endif %}
            	
            		{% endfor %}
            	
            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Stage2
    version: 1
  StepType-16:
    id: "16"
    isDisabled: false
    metadata:
      defaultStorageLocation: STAGE
      error: null
      nodeMetadataSpec: |-
        capitalized: External Table
        short: 'EXT'
        tagColor: '#C39BD3'
        isDisabled: false
        plural: External Tables

        deployStrategy: advanced

        config:
        - groupName: File Location
          items: 

          - displayName: Stage
            attributeName: fileLocation
            type: dropdownSelector
            default: "DOUG_DB.PUBLIC.DOUGS32"
            options:
            - "DOUG_DB.PUBLIC.DOUGS32"
            - "Create external stages on Snowflake"
            - "Place them in the same storage location"
            - "List the storage locations in this dropdown"
            isRequired: true

          - displayName: File Pattern
            attributeName: filePattern
            type: textBox
            default: ".*[.]json"
            isRequired: true

        - groupName: File Format 
          items:
          - displayName: File Type
            attributeName: fileType
            type: dropdownSelector
            default: JSON
            options:
            - "CSV"
            - "JSON"
            - "Parquet"
            - "XML"
            isRequired: true

          - displayName: Compression
            attributeName: compression
            enableIf: "{{ config.fileType in ['CSV','JSON'] }}" 
            type: dropdownSelector
            options:
            - "AUTO"
            - "GZIP"
            - "BZ2"
            - "BROTLI"
            - "ZSTD"
            - "DEFLATE"
            - "RAW_DEFLATE"
            - "NONE"
            isRequired: false

          - displayName: Record delimiter
            attributeName: recDelim
            type: textBox
            enableIf: "{{ config.fileType == 'CSV'}}" 
            default: "\n"
            isRequired: false

          - displayName: Field delimiter
            attributeName: fieldDelim
            type: textBox
            enableIf: "{{ config.fileType == 'CSV'}}" 
            default: ","
            isRequired: false

          - displayName: Field optionally enclosed by
            attributeName: fieldEnclosed
            type: textBox
            enableIf: "{{ config.fileType == 'CSV'}}" 
            default: "\\042"
            isRequired: false

          - displayName: Number of header lines to skip
            attributeName: skipHeader
            type: textBox
            enableIf: "{{ config.fileType == 'CSV'}}" 
            default: "1"
            isRequired: false

          - displayName: Skip blank lines
            attributeName: skipBlankLines
            enableIf: "{{ config.fileType == 'CSV'}}" 
            type: toggleButton
            default: true
            isRequired: false

          - displayName: Trim space
            attributeName: trimSpace
            enableIf: "{{ config.fileType == 'CSV'}}" 
            type: toggleButton
            default: true
            isRequired: false

        - groupName: Additional Options
          items:
          - displayName: Auto Refresh
            attributeName: autoRefresh
            type: toggleButton
            default: false
            isRequired: false

          - displayName: AWS SNS Topic
            attributeName: snsTopic
            type: textBox
            enableIf: "{{ config.autoRefresh }}"
            default: "arn:aws:sns:us-east-1:121674918127:prod-emea-s3-notification"
            isRequired: false

        - groupName: Hidden config
          enableIf: "false"
          items:
          - displayName: Type
            type: materializationSelector
            default: table
            options:
            - table
            isRequired: true

        systemColumns:

        - displayName: 'VALUE'
          attributeName: 'VALUE'
          transform: ''
          dataType: VARIANT
          placement: beginning
        - displayName: 'METADATA$FILENAME'
          attributeName: 'METADATA$FILENAME'
          transform: ''
          dataType: STRING
          placement: end
      templates:
        create:
          templateString: |-
            {% if desiredState is undefined %}
              {{ stage('Drop External Table') }}
              DROP EXTERNAL TABLE {{ ref_no_link(currentState.node.location.name, currentState.node.name) }}

            {% else %}

            {{ stage('Create External Table') }}

            CREATE OR REPLACE EXTERNAL TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
              {% if desiredState.config.fileType == "CSV" %}
                {% for col in desiredState.sources[0].columns if (col.name | upper != "VALUE" and col.name | upper != "METADATA$FILENAME") %}
                  {% if loop.first %}({% endif %}
                    "{{ col.name }}" {{ col.dataType }} AS (value:c{{ loop.index }}::{{ col.dataType }})
                  {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                  {%- if not loop.last -%}, {% else %}){% endif %}
                {% endfor %}
              {% endif %}
              
              with location = @{{desiredState.config.fileLocation | upper }}
              pattern='{{ desiredState.config.filePattern }}'
              file_format = (type = {{ desiredState.config.fileType }}
              {% if desiredState.config.fileType == "CSV" %}
                {% if desiredState.config.recDelim != null %}record_delimiter = '{{ desiredState.config.recDelim }}'{% endif %}
                {% if desiredState.config.fieldDelim != null %}field_delimiter = '{{ desiredState.config.fieldDelim }}'{% endif %}
                {% if desiredState.config.fieldEnclosed != null %}field_optionally_enclosed_by = '{{ desiredState.config.fieldEnclosed }}'{% endif %}
                {% if desiredState.config.skipHeader != null %}skip_header = {{ desiredState.config.skipHeader }}{% endif %}
                {% if desiredState.config.skipBlankLines %}skip_blank_lines = {{ desiredState.config.skipBlankLines }}{% endif %}
                {% if desiredState.config.trimSpace %}trim_space = {{ desiredState.config.trimSpace }}{% endif %}
              {% endif %}
              )
              auto_refresh = {{ desiredState.config.autoRefresh }}
              {% if desiredState.config.autoRefresh and desiredState.config.snsTopic != null %}aws_sns_topic = '{{ desiredState.config.snsTopic }}'{% endif %}
              {%- if desiredState.node.description | length > 0 %} COMMENT = '{{ desiredState.node.description }}'{% endif %}
            ;
            {% endif %}
        run:
          templateString: |-
            {% if config.autoRefresh is false %}
            {{ stage('Refresh External Table') }}
            ALTER EXTERNAL TABLE {{ ref_no_link(node.location.name, node.name) }} REFRESH
            {% endif %}
    name: External Table
    version: 1
  StepType-17:
    id: "17"
    isDisabled: true
    metadata:
      defaultStorageLocation: STAGE
      error: null
      nodeMetadataSpec: |
        capitalized: UNLOAD
        short: 'EXPORT'
        tagColor: 'dodgerblue'
        isDisabled: false
        plural: Unloads

        config:
        - groupName: File Location
          items: 

          - displayName: Stage
            attributeName: fileLocation
            type: dropdownSelector
            default: "DOUG_DB.PUBLIC.DOUGS3"
            options:
            - "DOUG_DB.PUBLIC.DOUGS3"
            - "Name of Snowflake STAGE"
            - "Add STAGE to Template"
            isRequired: true

        - groupName: File Format 
          items:
          - displayName: File Type
            attributeName: fileType
            type: dropdownSelector
            default: CSV
            options:
            - "CSV"
            - "JSON"
            - "Parquet"
            isRequired: true

          - displayName: Compression
            attributeName: compression
            enableIf: "{{ config.fileType in ['CSV','JSON'] }}" 
            type: dropdownSelector
            options:
            - "AUTO"
            - "GZIP"
            - "BZ2"
            - "BROTLI"
            - "ZSTD"
            - "DEFLATE"
            - "RAW_DEFLATE"
            - "NONE"
            isRequired: false

          - displayName: Record delimiter
            attributeName: recDelim
            type: textBox
            enableIf: "{{ config.fileType == 'CSV'}}" 
            default: "\n"
            isRequired: false

          - displayName: Field delimiter
            attributeName: fieldDelim
            type: textBox
            enableIf: "{{ config.fileType == 'CSV'}}" 
            default: ","
            isRequired: false

          - displayName: Field optionally enclosed by
            attributeName: fieldEnclosed
            type: textBox
            enableIf: "{{ config.fileType == 'CSV'}}" 
            default: "\\042"
            isRequired: false

          - displayName: Number of header lines to skip
            attributeName: skipHeader
            type: textBox
            enableIf: "{{ config.fileType == 'CSV'}}" 
            default: "1"
            isRequired: false

          - displayName: Skip blank lines
            attributeName: skipBlankLines
            enableIf: "{{ config.fileType == 'CSV'}}" 
            type: toggleButton
            default: true
            isRequired: false

          - displayName: Trim space
            attributeName: trimSpace
            enableIf: "{{ config.fileType == 'CSV'}}" 
            type: toggleButton
            default: true
            isRequired: false

        - groupName: Additional Options
          items:
          - displayName: Overwrite existing files
            attributeName: overwrite
            type: toggleButton
            default: true
            isRequired: false
          - displayName: Single file
            attributeName: singleFile
            type: toggleButton
            default: true
            isRequired: false

        - groupName: Hidden config
          enableIf: "false"
          items:
          - displayName: Type
            type: materializationSelector
            default: table
            options:
            - table
            isRequired: false
      templates:
        create:
          templateString: |-
            {{ stage('Nothing to create') }}
            SELECT 1
        run:
          templateString: |-
            {% for source in sources %}
                {% for dep in source.dependencies if dep.node %}
                    {{ stage('Unloading ' + dep.node.name | string ) }}
                    COPY INTO @{{ ref_no_link(node.location.name, config.fileLocation) | trim | upper ~ "/" ~ node.name }}{% if config.singleFile %}.{{ config.fileType | lower }}{% endif %}
                    FROM {{ ref_no_link(dep.node.location.name, dep.node.name) | upper }}
                    overwrite = {{ config.overwrite }}
                    single = {{ config.singleFile }}
                    file_format = (type = {{ config.fileType }}
                    {% if config.fileType == "CSV" %}
                        {% if config.recDelim != null %}record_delimiter = '{{ config.recDelim }}'{% endif %}
                        {% if config.fieldDelim != null %}field_delimiter = '{{ config.fieldDelim }}'{% endif %}
                        {% if config.fieldEnclosed != null %}field_optionally_enclosed_by = '{{ config.fieldEnclosed }}'{% endif %}
                        {% if config.skipHeader != null %}skip_header = {{ config.skipHeader }}{% endif %}
                        {% if config.skipBlankLines %}skip_blank_lines = {{ config.skipBlankLines }}{% endif %}
                        {% if config.trimSpace %}trim_space = {{ config.trimSpace }}{% endif %}
                    {% endif %}
                    )
                {% endfor %}
            {% endfor %}
    name: Unload
    version: 1
  StepType-2:
    id: "2"
    isDisabled: false
    metadata:
      defaultStorageLocation: STAGE
      error: null
      nodeMetadataSpec: |-
        capitalized: CDC Table
        short: "CDC"
        tagColor: "#FF33CC"
        plural: CDC Tables
        config:
        - groupName: Stream
          items:
          - displayName: Description
            attributename: description
            type: textBox
            isRequired: false
            default: "A CDC table consists of a few components:\n
              1. A stream on the source node\n
              2. The CDC table which contains a persistent replica of recent CDC records\n
              3. A sequence to keep track of streams\n
              4. Optional: a Task to replicate records from the Stream into the CDC table\n
              "
        - groupName: Task
          items:
          - displayName: Create Task
            enableIf: {{config.cdcTableEnabled}}
            attributeName: taskEnabled
            type: toggleButton
            default: false
            isRequired: false
          - displayName: Task Schedule
            enableIf: "{{config.taskEnabled}}"
            attributeName: taskSchedule
            type: dropdownSelector
            default: "Every 30 minutes"
            options:
            - "Every minute"
            - "Every 5 minutes"
            - "Every 30 minutes"
            - "Every hour"
            - "Every day"
            isRequired: false
          - displayName: Warehouse
            enableIf: "{{config.taskEnabled}}"
            attributeName: taskWarehouse
            type: dropdownSelector
            default: "COMPUTE_WH"
            options:
            - "COMPUTE_WH"
            isRequired: false
          - displayName: Custom Task Name
            enableIf: "{{config.taskEnabled}}"
            attributeName: taskCustomName
            type: textBox
            isRequired: false
        - groupName: Hidden config
          enableIf: "false"
          items:
          - displayName: Type
            type: materializationSelector
            default: table
            options:
            - table
            isRequired: false
        systemColumns:
        - displayName: "METADATA$ACTION"
          transform: "METADATA$ACTION"
          dataType: STRING
          placement: end
          attributeName: isStreamMetadataAction
          description: Indicates the DML operation (INSERT, DELETE) recorded.
        - displayName: "METADATA$ISUPDATE"
          transform: "METADATA$ISUPDATE"
          dataType: STRING
          placement: end
          attributeName: isStreamMetadataIsUpdate
          description: Indicates whether the operation was part of an UPDATE statement.
        - displayName: "METADATA$ROW_ID"
          transform: "METADATA$ROW_ID"
          dataType: STRING
          placement: end
          attributeName: isStreamMetadataRowId
          description: Specifies the unique and immutable ID for the row, which can be used to track changes to specific rows over time.
        - displayName: "CDC_ID"
          transform: ""
          dataType: INTEGER
          placement: end
          attributeName: isStreamMetadataCDCId
          description: Medtronic specific CDC identifier based on a sequence.
        - displayName: "CDC_TIMESTAMP"
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate
          description: Medtronic specific attribute containing the timestamp of storing the CDC record.
      templates:
        create:
          templateString: |-
            {{ stage('Create Stream') }}
            CREATE OR REPLACE STREAM {{ ref_no_link(node.location.name, "STR_" + node.name) }}
            ON TABLE {{ ref(sources[0].dependencies[0].node.location.name, sources[0].dependencies[0].node.name) }}
            APPEND_ONLY = FALSE SHOW_INITIAL_ROWS = TRUE
            COMMENT = 'CDC Stream on {{ ref(node.location.name, sources[0].dependencies[0].node.name) }}'
            {{ stage('Create Sequence') }}
            CREATE OR REPLACE SEQUENCE {{ ref_no_link(node.location.name, "SEQ_" + node.name) }}
            {{ stage('Create CDC Table') }}
            CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            (
                {% for col in columns %}
                    "{{ col.name }}" {{ col.dataType }}
                    {%- if not col.nullable %} NOT NULL
                        {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                    {% endif %}
                    {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                    {%- if not loop.last -%}, {% endif %}
                {% endfor %}
            )
            {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
            {% if config.taskEnabled is true %}
                {{ stage('Create Task') }}
                CREATE OR REPLACE TASK
                {% if config.taskCustomName != '' %}
                    {{ ref_no_link(node.location.name, config.taskCustomName) }}
                {% else %}
                    {{ ref_no_link(node.location.name, "TSK_" + node.name) }}
                {% endif %}
                WAREHOUSE = {{config.taskWarehouse}}
                SCHEDULE =
                {% if config.taskSchedule == 'Every minute' %}
                    '1 MINUTE'
                {% elif config.taskSchedule == 'Every 5 minutes' %}
                    '5 MINUTE'
                {% elif config.taskSchedule == 'Every 30 minutes' %}
                    '30 MINUTE'
                {% elif config.taskSchedule == 'Every hour' %}
                    '60 MINUTE'
                {% elif config.taskSchedule == 'Every day' %}
                    '3600 MINUTE'
                {% else %}
                    'INVALID'
                {% endif %}
                COMMENT='Task to copy data of stream STR_{{node.name}} to CDC Table {{node.name}}'
                WHEN "SYSTEM$STREAM_HAS_DATA"('{{- ref_no_link(node.location.name, "STR_" + node.name) -}}')
                AS
                INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
                {% for source in sources %}
                    SELECT
                    {% for col in source.columns %}
                        {% if col.name == 'CDC_ID' %}
                             {{ ref_no_link(node.location.name, "SEQ_" + node.name) }}.NEXTVAL
                        {% elif col.transform | trim != '' %}
                            {{ col.transform.replace(source.dependencies[0].node.name, 'STR_' + node.name) }}
                        {% elif col.sourceColumns[0].column and col.sourceColumns[0].column.name %}
                            "STR_{{ node.name }}"."{{ col.sourceColumns[0].column.name }}"
                        {% else %}
                            NULL
                        {% endif %}
                        AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                    FROM {{ ref_no_link(node.location.name, "STR_" + node.name) }}
                    {% if config.insertStrategy in ['UNION', 'UNION ALL'] and not loop.last %}
                        {{config.insertStrategy}}
                    {% endif %}
                {% endfor %}
            {% endif %}
        run:
          templateString: |-
            {% if config.taskEnabled is true %}
                {{ stage('Resume Task') }}
                ALTER TASK
                {% if config.taskCustomName != '' %}
                    {{ ref_no_link(node.location.name, config.taskCustomName) }}
                {% else %}
                    {{ ref_no_link(node.location.name, "TSK_" + node.name) }}
                {% endif %}
                RESUME
            {% else %}
                {{ stage('Insert From Stream') }}
                INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
                {% for source in sources %}
                    SELECT
                    {% for col in source.columns %}
                        {% if col.name == 'CDC_ID' %}
                            {{ ref_no_link(node.location.name, "SEQ_" + node.name) }}.NEXTVAL
                        {% else %}
                            {{ get_source_transform(col) }}
                        {% endif %} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                    FROM {{ ref_no_link(node.location.name, "STR_" + node.name) }} AS "{{ sources[0].dependencies[0].node.name }}"
                    {% if config.insertStrategy in ['UNION', 'UNION ALL'] and not loop.last %}
                        {{config.insertStrategy}}
                    {% endif %}
                {% endfor %}
            {% endif %}
    name: CDC Table
    version: 1
  StepType-20:
    id: "20"
    isDisabled: false
    metadata:
      defaultStorageLocation: DWH
      error: null
      nodeMetadataSpec: |-
        capitalized: PII View
        short: VPII
        tagColor: 'red'
        isDisabled: true
        plural: Views

        config:
          - groupName: Documentation
            items:
            - displayName: Description
              attributename: description
              type: textBox
              isRequired: false
              default: "A PII View adds a masking policy to specific attributes marked using the PII Flag column.  Allowed values (PII or blank)."

          - groupName: Options
            items: 

            - displayName: Masking policy name
              attributeName: maskingPolicy
              type: textBox
              isRequired: true

          - groupName: Hidden config
            enableIf: "false"
            items:
            - displayName: Type
              type: materializationSelector
              default: view
              options:
              - view
              isRequired: true

        mappingColumns:                                  
        - type: textBox                                  
          headerName: 'PII Flag'                        
          attributeName: piiFlag
      templates:
        create:
          templateString: |+
            {% set source = sources[0] %}
            {{ stage('Create View') }}
            CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
            (
                {% for col in columns %}
                    "{{ col.name }}"{%- if col.piiFlag | upper == "PII"%} MASKING POLICY "{{config.maskingPolicy}}" {% endif %}
                    {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                    {%- if not loop.last -%}, {% endif %}
                {% endfor %}
            )
            {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
            AS

            SELECT {% if config.selectDistinct %} DISTINCT {% endif %}
            {% for col in source.columns %}
                {{ get_source_transform(col) }} AS "{{ col.name }}"
                {%- if not loop.last -%}, {% endif %}
            {% endfor %}

            {{ source.join }}


        run:
          templateString: ""
    name: PII View
    version: 1
  StepType-3:
    id: "3"
    isDisabled: true
    metadata:
      defaultStorageLocation: DWH
      error: null
      nodeMetadataSpec: |-
        capitalized: MS Loop
        short: MSLOOP
        plural: MS Loop
        tagColor: 'black'
        config:
        - groupName: Additional Options
          items:
          - type: materializationSelector
            default: table
            options:
            - table
            - view
            isRequired: true
          - type: multisourceToggle
            isRequired: false
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}"
          - displayName: Insert Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: INSERT
            options:
            - "INSERT"
            - "UNION"
            - "UNION ALL"
            isRequired: true
          - displayName: Truncate Before
            attributeName: truncateBefore
            type: toggleButton
            default: true
            isRequired: true
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false
          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false
        - groupName: Storage Location Query
          items:
          - displayName: Starts With
            attributeName: storageLocationSearchText
            type: textBox
            default: 'SOURCE'
            isRequired: true
        systemColumns:
        - displayName: "SOURCE"
          transform: ''
          dataType: VARCHAR
          placement: end
          attributeName: isSystemSource
      templates:
        create:
          templateString: |-
            {% if node.override.create.enabled %}
                {{ node.override.create.script }}
            {% elif node.materializationType == 'table' %}
                {{ stage('Create Stage Table') }}
                CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}" {{ col.dataType }}
                        {%- if not col.nullable %} NOT NULL
                            {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                        {% endif %}
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
            {% elif node.materializationType == 'view' %}
                {{ stage('Create Stage View') }}
                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
                AS
                {% for source in sources %}
                    SELECT
                    {% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                    {{ source.join }}
                    {% if not loop.last %}
                        {% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
                            {{ config.insertStrategy }}
                        {% else %}
                            UNION
                        {% endif %}
                    {% endif %}
                {% endfor %}
            {% endif %}
        run:
          templateString: |-
            {% if config.truncateBefore %}
                {{ stage('Truncate Stage Table') }}
                TRUNCATE IF EXISTS {{ ref_no_link(node.location.name, node.name) }}
            {% endif %}
            {% for sourceMapping in storageLocations if sourceMapping.name.startswith(config.storageLocationSearchText) %}
                {% if node.materializationType == 'table' %}
                    {% if config.preSQL %}
                        {{ stage('Pre-SQL') }}
                        {{ config.preSQL }}
                    {% endif %}
                        {% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
                            {{ stage( config.insertStrategy + ' Sources' | string ) }}
                            INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
                                (
                                    {% for col in columns %}
                                        "{{ col.name }}"
                                        {%- if not loop.last -%},{% endif %}
                                    {% endfor %}
                                )
                        {% endif %}
                        {% for source in sources %}
                            {% if config.insertStrategy == 'INSERT' %}
                                {{ stage('Insert ' +  sourceMapping.name + '_' + source.name | string ) }}
                                INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
                                (
                                    {% for col in source.columns %}
                                        "{{ col.name }}"
                                        {%- if not loop.last -%},{% endif %}
                                    {% endfor %}
                                )
                            {% endif %}
                            SELECT
                            {% for col in source.columns %}
                                {% if col.isSystemSource %}
                                    '{{ sourceMapping.name }}'
                                {% else %}
                                    {{ get_source_transform(col) }}
                                {% endif %}
                                AS "{{ col.name }}"
                                {%- if not loop.last -%}, {% endif %}
                            {% endfor %}
                            FROM {{ ref(sourceMapping.name, sources[0].columns[0].sourceColumns[0].node.name )}}
                            {% if config.insertStrategy in ['UNION', 'UNION ALL'] and not loop.last %}
                                {{config.insertStrategy}}
                            {% endif %}
                        {% endfor %}
                    {% if config.postSQL %}
                        {{ stage('Post-SQL') }}
                        {{ config.postSQL }}
                    {% endif %}
                {% endif %}
            {% endfor %}
    name: Multi-Source Loop
    version: 1
  StepType-4:
    id: "4"
    isDisabled: false
    metadata:
      defaultStorageLocation: STAGE
      error: null
      nodeMetadataSpec: |-
        capitalized: Stage Date
        short: DATE
        plural: Dates
        tagColor: 'black'
        config:
        - groupName: Date Options
          items:
          - displayName: Starting Date
            attributeName: startingDate
            type: textBox
            syntax: sql
            default: 'DATEADD(DAY, -730, CURRENT_DATE)'
          - displayName: Number of Days to Generate
            attributeName: daysToGenerate
            type: textBox
            default: '2000'
          - displayName: Generated Date Column Name
            attributeName: dateColumnName
            type: textBox
            default: '"DATE_COL"'
        - groupName: Additional Options
          items:
          - type: materializationSelector
            default: table
            options:
            - table
            isRequired: true
          - displayName: Truncate Before
            attributeName: truncateBefore
            type: toggleButton
            default: true
            isRequired: true
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false
          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false
        systemColumns:
        - displayName: DATE_KEY
          transform: '{{ config.dateColumnName }}'
          dataType: 'DATE'
          placement: beginning
          attributeName: isDate
        - displayName: 'YEAR'
          transform: 'YEAR({{ config.dateColumnName }})'
          dataType: SMALLINT
          placement: beginning
          attributeName: isYear
        - displayName: 'MONTH'
          transform: 'MONTH({{ config.dateColumnName }})'
          dataType: SMALLINT
          placement: beginning
          attributeName: isMonth
        - displayName: 'MONTH_NAME'
          transform: 'MONTHNAME({{ config.dateColumnName }})'
          dataType: CHAR(3)
          placement: beginning
          attributeName: isMonthName
        - displayName: 'DAY_OF_MONTH'
          transform: 'DAY({{ config.dateColumnName }})'
          dataType: SMALLINT
          placement: beginning
          attributeName: isDayOfMonth
        - displayName: 'DAY_OF_WEEK'
          transform: 'DAYOFWEEK({{ config.dateColumnName }})'
          dataType: VARCHAR(9)
          placement: beginning
          attributeName: isDayOfWeek
        - displayName: 'WEEK_OF_YEAR'
          transform: 'WEEKOFYEAR({{ config.dateColumnName }})'
          dataType: SMALLINT
          placement: beginning
          attributeName: isWeekOfYear
        - displayName: 'DAY_OF_YEAR'
          transform: 'DAYOFYEAR({{ config.dateColumnName }})'
          dataType: SMALLINT
          placement: beginning
          attributeName: isYearColumn
        - displayName: 'QTR_OF_YEAR'
          transform: 'QUARTER({{ config.dateColumnName }})'
          dataType: SMALLINT
          placement: beginning
          attributeName: isYearColumn
      templates:
        create:
          templateString: |-
            {{ stage('Create Stage Table') }}
                CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}" {{ col.dataType }}
                        {%- if not col.nullable %} NOT NULL
                            {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                        {% endif %}
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
        run:
          templateString: |-
            {% if config.preSQL %}
                {{ stage('Pre-SQL') }}
                {{ config.preSQL }}
            {% endif %}
            {% if config.truncateBefore %}
                {{ stage('Truncate Stage Table') }}
                TRUNCATE IF EXISTS {{ ref_no_link(node.location.name, node.name) }}
            {% endif %}
            {{ stage('Insert ' + sources[0].name | string ) }}
                INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in sources[0].columns %}
                        "{{ col.name }}"
                        {%- if not loop.last -%},{% endif %}
                    {% endfor %}
                )
                WITH CTE_DATE_GENERATOR AS (
                    SELECT DATEADD(DAY, SEQ4(), {{config.startingDate }}) AS {{ config.dateColumnName }}
                    FROM TABLE(GENERATOR(ROWCOUNT=>{{ config.daysToGenerate }}))
                )
                SELECT
                {% for col in sources[0].columns %}
                    {{ get_source_transform(col) }} AS "{{ col.name }}"
                    {%- if not loop.last -%}, {% endif %}
                {% endfor %}
                FROM CTE_DATE_GENERATOR
            {% if config.postSQL %}
                {{ stage('Post-SQL') }}
                {{ config.postSQL }}
            {% endif %}
    name: Date Stage
    version: 1
  StepType-43:
    id: "43"
    isDisabled: false
    metadata:
      defaultStorageLocation: DWH
      error: null
      nodeMetadataSpec: |-
        capitalized: Dimension with Zero Key
        short: DIM
        tagColor: '#1E339A'
        plural: Dimensions

        config:
        - groupName: Options
          items:

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}"

          - type: businessKeyColumns
            isRequired: true

          - type: toggleButton
            attributeName: insertZeroKey
            displayName: Insert Zero Key Record
            default: true

          - type: changeTrackingColumns
            isRequired: false

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        - groupName: Hidden config
          enableIf: "false"
          items:
          - displayName: Type
            type: materializationSelector
            default: table
            options:
            - table
            isRequired: false

        systemColumns:
        - displayName: '{{NODE_NAME}}_KEY'
          transform: ''
          dataType: NUMBER
          placement: beginning
          attributeName: isSurrogateKey

        - displayName: SYSTEM_VERSION
          transform: ''
          dataType: NUMBER
          placement: end
          attributeName: isSystemVersion

        - displayName: SYSTEM_CURRENT_FLAG
          transform: ''
          dataType: VARCHAR
          placement: end
          attributeName: isSystemCurrentFlag

        - displayName: SYSTEM_START_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemStartDate

        - displayName: SYSTEM_END_DATE
          transform: CAST('2999-12-31 00:00:00' AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemEndDate

        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |
            {% if node.materializationType == 'table' %}
            	{{ stage('Create Dimension Table') }}

            	CREATE OR REPLACE TABLE {{ this }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}" {{ col.dataType }} 
            			{% if col.isSurrogateKey %}
            		        identity
            			{% endif %}
            			{%- if not col.nullable %} NOT NULL
            				{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            			{% endif %}
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}

            	{% if config.insertZeroKey %}

            		{{ stage('Insert Zero Record') }}
            		INSERT INTO {{ this }}
            		(SELECT 
            		{% for col in sources[0].columns %}
            			{% set dtparams = col.dataType.partition('(')[-1].rpartition(')')[0].split(',') %}
            			{% if col.isSurrogateKey %}0
            				{% elif col.isSystemCurrentFlag %}'Y'
            				{% elif col.isSystemStartDate or col.isSystemEndDate or col.isSystemUpdateDate or col.isSystemCreateDate %}{{ get_source_transform(col) }}
            				{% elif col.isSystemVersion%}1
            				{% elif col.dataType[:3] | upper in ('NUM','INT','DEC','FLO') %}0
            				{% elif col.dataType[:4] | upper in ('DATE','TIME') %}CAST('0001-01-01' AS {{ col.dataType }})
            				{% elif col.dataType[:3] | upper in ('VAR','CHA','STR','BIN') %}
            					{% if dtparams[0] and dtparams[0] | int < 7 %}
            						SUBSTRING('UNKNOWN',1,{{ dtparams[0] }})
            					{% else %}
            						'UNKNOWN'
            					{% endif %}
            				{% elif col.nullable %}NULL
            				{% else %}''
            			{% endif %}
            			AS "{{ col.name }}"
            			{% if not loop.last %}, {% endif %}
            		{% endfor %}
            		)
            	{% endif %}

            {% elif node.materializationType == 'view' %}
            	{{ stage('Create Dimension View') }}

            	CREATE OR REPLACE VIEW {{ this }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}"
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
            			{%- if not loop.last -%},{% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
            	AS
            	{% for source in sources %}

            		{% if loop.first %}SELECT {% endif %}

            		{% for col in source.columns %}
            			{% if col.isSurrogateKey or col.isSystemUpdateDate or col.isSystemCreateDate %}
                            NULL
            			{% else %}
                            {{ get_source_transform(col) }}
            			{% endif %}
            			AS "{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            		{{ source.join }}

            		{% if not loop.last %} UNION ALL {% endif %}
            	{% endfor %}

            {% endif %}
        run:
          templateString: |

            {% set is_type_2 = columns | selectattr("isChangeTracking") | list | length > 0 %}

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}

            	{% if config.preSQL %}			
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
                {% if is_type_2 %}

                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                        /* New Rows That Don't Exist */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_INITAL_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        LEFT JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                                {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "DIM"."{{ col.name }}" IS NULL
                        {% endfor %}
                        UNION ALL
                        /* New Row Needing To Be Inserted Due To Type-2 Column Changes */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                "DIM"."{{ col.name }}" + 1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_NEW_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Expired Due To Type-2 Column Changes
                        In this case, only two columns are merged (version and end date) */
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemEndDate %}
                                DATEADD(MILLISECONDS, -1, CAST(CURRENT_TIMESTAMP AS TIMESTAMP))
                            {% elif col.isSystemCurrentFlag %}
                                'N'
                            {% else %}
                                "DIM"."{{ col.name }}"
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'update_expired_version_rows' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Updated Due To Changes To Non-Type-2 source.columns
                        This case merges only when there are changes in non-type-2 column updates, but no changes in type-2 columns*/
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion or col.isSystemCreateDate or col.isSystemStartDate or col.isSystemEndDate %}
                                "DIM"."{{ col.name }}"
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                                {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'UPDATE_NON_TYPE2_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        AND (
                        {% for col in source.columns if (col.isChangeTracking) -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %} )
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isChangeTracking or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) -%}
                            {% if loop.first %}
                                AND (
                            {% endif %}
                            {% if not loop.first %}
                                OR
                            {% endif %}
                            NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                    ) AS "SRC"
                    ON
                    {% for col in source.columns if col.isBusinessKey -%}
                        {% if not loop.first %}
                            AND
                        {% endif %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                    {% endfor %}
                    AND "TGT"."{{ get_value_by_column_attribute("isSystemVersion") }}" = "SRC"."{{ get_value_by_column_attribute("isSystemVersion") }}"
                    WHEN MATCHED THEN UPDATE SET
                    {%- for col in source.columns if not (col.isBusinessKey or col.isSurrogateKey or col.isSystemCreateDate) %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    WHEN NOT MATCHED THEN INSERT (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )
                    VALUES (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )

                {% endfor %}



                {% else %}
                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string ) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                            SELECT
                            {% for col in source.columns if not col.isSurrogateKey %}
                                {% if col.isSystemVersion %}
                                	1
                                {% elif col.isSystemCurrentFlag %}
                                	'Y'
                                {% else %}
                                    {{ get_source_transform(col) }}
                                {% endif %}
                                AS "{{ col.name }}"
                                {%- if not loop.last %}, {% endif %}
                            {% endfor %}
                            {{ source.join }})
                            AS "SRC"
                        ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                        {% endfor %}
                        WHEN MATCHED
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            NVL( CAST("SRC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("TGT"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        THEN UPDATE SET
                        {%- for col in source.columns if not (  col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemCreateDate) %}
                                "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor %}
                        WHEN NOT MATCHED THEN
                        INSERT (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                        VALUES (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                    {% endfor %}
                {% endif %}
            	
            	{% if config.postSQL %}			
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Dimension 0
    version: 1
  StepType-53:
    id: "53"
    isDisabled: false
    metadata:
      defaultStorageLocation: DWH
      error: null
      nodeMetadataSpec: |
        capitalized: Data Store
        short: DS
        plural: Data Stores
        tagColor: '#29B2DB'

        config:
        - groupName: Documentation
          items:
          - displayName: Description
            attributename: description
            type: textBox
            isRequired: false
            default: "Data Store Node\n\n
              This is a persistent table that requires a business key or natural key\n
              in order to process create and process.  Changing attributes can optionally be \n
              selected to track changes with a new system_start_time.\n\n
              Note: Failing to select a business will cause an error on Create or Run\n
              "
        - groupName: Options
          items:
          
          - type: businessKeyColumns
            isRequired: false

          - type: changeTrackingColumns
            isRequired: false

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        - groupName: Hidden config
          enableIf: "false"
          items:
          - displayName: Type
            type: materializationSelector
            default: table
            options:
            - table
            isRequired: false

        systemColumns:

        - displayName: '{{NODE_NAME}}_KEY'
          transform: ''
          dataType: NUMBER
          placement: beginning
          attributeName: isSurrogateKey

        - displayName: SYSTEM_VERSION
          transform: ''
          dataType: NUMBER
          placement: end
          attributeName: isSystemVersion

        - displayName: SYSTEM_CURRENT_FLAG
          transform: ''
          dataType: VARCHAR
          placement: end
          attributeName: isSystemCurrentFlag

        - displayName: SYSTEM_START_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemStartDate

        - displayName: SYSTEM_END_DATE
          transform: CAST('2999-12-31 00:00:00' AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemEndDate

        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |+
            {{ stage('Create Data Store Table') }}

                CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}" {{ col.dataType }}
                        {% if col.isSurrogateKey %}
            		        identity
                        {% endif %}
                        {%- if not col.nullable %} NOT NULL
                            {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                        {% endif %}
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}


        run:
          templateString: |-

            {% set has_business_key = columns | selectattr("isBusinessKey") | list | length > 0 %}
            {% set is_type_2 = columns | selectattr("isChangeTracking") | list | length > 0 %}

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
                {% if has_business_key and is_type_2 %}

                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                        /* New Rows That Don't Exist */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_INITAL_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        LEFT JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                                {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "DIM"."{{ col.name }}" IS NULL
                        {% endfor %}
                        UNION ALL
                        /* New Row Needing To Be Inserted Due To Type-2 Column Changes */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                "DIM"."{{ col.name }}" + 1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_NEW_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Expired Due To Type-2 Column Changes
                        In this case, only two columns are merged (version and end date) */
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemEndDate %}
                                DATEADD(MILLISECONDS, -1, CAST(CURRENT_TIMESTAMP AS TIMESTAMP))
                            {% elif col.isSystemCurrentFlag %}
                                'N'
                            {% else %}
                                "DIM"."{{ col.name }}"
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'update_expired_version_rows' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Updated Due To Changes To Non-Type-2 source.columns
                        This case merges only when there are changes in non-type-2 column updates, but no changes in type-2 columns*/
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion or col.isSystemCreateDate or col.isSystemStartDate or col.isSystemEndDate %}
                                "DIM"."{{ col.name }}"
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                                {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'UPDATE_NON_TYPE2_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        AND (
                        {% for col in source.columns if (col.isChangeTracking) -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %} )
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isChangeTracking or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) -%}
                            {% if loop.first %}
                                AND (
                            {% endif %}
                            {% if not loop.first %}
                                OR
                            {% endif %}
                            NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                    ) AS "SRC"
                    ON
                    {% for col in source.columns if col.isBusinessKey -%}
                        {% if not loop.first %}
                            AND
                        {% endif %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                    {% endfor %}
                    AND "TGT"."{{ get_value_by_column_attribute("isSystemVersion") }}" = "SRC"."{{ get_value_by_column_attribute("isSystemVersion") }}"
                    WHEN MATCHED THEN UPDATE SET
                    {%- for col in source.columns if not (col.isBusinessKey or col.isSurrogateKey or col.isSystemCreateDate) %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    WHEN NOT MATCHED THEN INSERT (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )
                    VALUES (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )

                {% endfor %}

                {% elif has_business_key and not is_type_2 %}
                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string ) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                            SELECT
                            {% for col in source.columns if not col.isSurrogateKey %}
                                {% if col.isSystemVersion %}
                                	1
                                {% elif col.isSystemCurrentFlag %}
                                	'Y'
                                {% else %}
                                    {{ get_source_transform(col) }}
                                {% endif %}
                                AS "{{ col.name }}"
                                {%- if not loop.last %}, {% endif %}
                            {% endfor %}
                            {{ source.join }})
                            AS "SRC"
                        ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                        {% endfor %}
                        WHEN MATCHED
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            NVL( CAST("SRC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("TGT"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        THEN UPDATE SET
                        {%- for col in source.columns if not (  col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemCreateDate) %}
                                "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor %}
                        WHEN NOT MATCHED THEN
                        INSERT (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                        VALUES (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                    {% endfor %}
                {% else %}
                    {% for source in sources %}
                        {{ stage('Insert ' + source.name | string ) }}
                        INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
                        (
                            {% for col in source.columns if not col.isSurrogateKey %}
                                "{{ col.name }}"
                                {%- if not loop.last -%},{% endif %}
                            {% endfor %}
                        )

                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}

                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                                {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                            
                        {% endfor %}
                        {{ source.join }}
                    {% endfor %}            
                {% endif %}
            	
            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            	
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Data Store
    version: 1
  StepType-61:
    id: "61"
    isDisabled: false
    metadata:
      defaultStorageLocation: STAGE
      error: null
      nodeMetadataSpec: |-
        capitalized: Dynamic Table
        short: 'DYN'
        tagColor: '#C39BD3'
        isDisabled: false
        plural: External Tables

        deployStrategy: advanced

        config:
        - groupName: Options
          items: 
          - displayName: Lag
            attributeName: lagSchedule
            type: dropdownSelector
            default: "30 MINUTE"
            options:
            - "1 MINUTE"
            - "5 MINUTE"
            - "30 MINUTE"
            - "1 HOUR"
            - "1 DAY"
            isRequired: false
            
          - displayName: Warehouse
            attributeName: Warehouse
            type: dropdownSelector
            default: "COMPUTE_WH"
            options:
            - "COMPUTE_WH"
            isRequired: false

        - groupName: Hidden config
          enableIf: "false"
          items:
          - displayName: Type
            type: materializationSelector
            default: view
            options:
            - view
            isRequired: true
        systemColumns:

        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |-
            {% if desiredState == undefined %}
              {{ stage('Drop Dynamic Table') }}
              DROP DYNAMIC TABLE {{ ref_no_link(currentState.node.location.name, currentState.node.name) }}

            {% else %}

            {{ stage('Create Dynamic Table') }}

            CREATE OR REPLACE DYNAMIC TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
              LAG = '{{ desiredState.config.lagSchedule }}'
              WAREHOUSE = {{ desiredState.config.Warehouse }}
            AS
              SELECT
                {% for col in desiredState.sources[0].columns %}
                    {{ get_source_transform(col) }} AS "{{ col.name }}"
                  {%- if not loop.last -%}, {% endif %}
                {% endfor %}
              {{ desiredState.sources[0].join }}
            ;
            {% endif %}
        run:
          templateString: ""
    name: Dynamic Table
    version: 1
  StepType-72:
    id: "72"
    isDisabled: false
    metadata:
      defaultStorageLocation: STAGE
      error: null
      nodeMetadataSpec: |-
        capitalized: EXCEL FILE
        short: XLSX
        plural: Excel Files
        tagColor: 'green'
        config:
        - groupName: Options
          items:

          - displayName: Stage
            attributeName: stage
            type: dropdownSelector
            default: "DOUG_DB.PUBLIC.PYTHON_TEST"
            options:
            - "DOUG_DB.PUBLIC.PYTHON_TEST"
            - "TPCH"
            - "RefData"
            - "Logs"
            isRequired: true

          - displayName: Filename
            attributeName: filename
            type: textBox
            default: Suppliers.xlsx
            isRequired: true

          - displayName: Worksheet (empty will take the first sheet)
            attributeName: worksheet
            type: textBox
            isRequired: false

          - displayName: Number of rows to skip
            attributeName: skipRows
            type: textBox
            isRequired: false
          
          - displayName: Columns to be used (eg. C:D)
            attributeName: useCols
            type: textBox
            isRequired: false  

        systemColumns:
        - displayName: 'VALUE'
          attributeName: 'VALUE'
          transform: ''
          dataType: VARIANT
          placement: beginning
      templates:
        create:
          templateString: |-
            {{ stage('Create Python Procedure ') }}
            CREATE OR REPLACE PROCEDURE {{ ref_no_link(node.location.name, 'PROC_' + node.name | upper) | trim }}(INPUT_DESTINATION_TABLE STRING, SKIP_ROWS INT, USE_COLS STRING)
              returns string not null
              language python
              runtime_version = '3.8'
              packages = ('snowflake-snowpark-python', 'pandas', 'openpyxl') -- openpyxl required for pandas to read xlsx
              imports = ('@{{ ref_no_link(node.location.name) | replace('""', '"' + config.stage + '"') | upper | trim }}/{{ config.filename | trim }}')
              handler = 'leverage_external_mapping_file_py'
            as
            $$
            import pandas
            import sys
            from snowflake.snowpark.functions import sql_expr
            IMPORT_DIRECTORY_NAME = "snowflake_import_directory"
            import_dir = sys._xoptions[IMPORT_DIRECTORY_NAME]
            def leverage_external_mapping_file_py(snowpark_session, destination_table: str, skip_rows: int, use_cols: str):
              mapping_df_pd = pandas.read_excel(import_dir + '{{ config.filename }}'{% if config.worksheet %},sheet_name="{{ config.worksheet }}"{% endif %}{% if config.skipRows %}, skiprows=skip_rows{% endif %}{%if config.useCols %}, usecols=use_cols{% endif %})
              json = mapping_df_pd.to_json(orient="records")
              df = snowpark_session.create_dataframe([json]).to_df("value")
              df = df.withColumn("value",sql_expr("parse_json(value)"))
              df.write.mode("overwrite").save_as_table(destination_table)
              return json
            $$
        run:
          templateString: |-
            {{ stage('Run Stored Procedure') }}
            CALL {{ ref_no_link(node.location.name, 'PROC_' + node.name | upper) | trim }}(
                '{{ this }}'
                ,{% if config.skipRows %}{{ config.skipRows }}{% else %}NULL{% endif %}
                ,{% if config.useCols %}'{{ config.useCols }}'{% else %}NULL{% endif %}
            )
    name: Excel File
    version: 1
  StepType-80:
    id: "80"
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: SQL
        short: SQL
        tagColor: gray
        plural: sql

        config: 
        - groupName: Options 
          items: 
          - type: materializationSelector
            options:
              - table
            default: table
            isRequired: true
            isEnabled: "false"

          - displayName: SQL
            attributeName: SQLstmt 
            type: textBox 
            syntax: sql 
            isRequired: true    
            default: "  CREATE OR REPLACE TABLE DB.SCHEMA.TEST AS \n
            SELECT 1 COL"
         
        systemColumns: 
        - displayName: SYSTEM_START_DATE 
          transform: CURRENT_TIMESTAMP
          dataType: TIMESTAMP 
          placement: beginning 
          attributeName: isSQL
         
        - displayName: SQL_STMT
          transform: ''
          dataType: VARCHAR 
          placement: end 
          attributeName: isSystemStartDate 
         
      templates:
        create:
          templateString: |-
            {{ stage('Create SQL Table') }}

            CREATE OR REPLACE TABLE {{ this }}
            (
                {% for col in columns %}
                    "{{ col.name }}" {{ col.dataType }} 
                    {%- if not loop.last -%}, {% endif %}
                {% endfor %}
            )
        run:
          templateString: |-
            {% set sql = config.SQLstmt %}
            {% set sql_fix = sql | replace("'", "''") %}

            {{ stage('Insert SQL') }} 
            INSERT INTO {{ this }} (SYSTEM_START_DATE, SQL_STMT) 
            SELECT CURRENT_TIMESTAMP, '{{ sql_fix }}'; 

            {{ stage('Run SQL') }}
            {{ sql }}
    name: SQL
    version: 1
  StepType-81:
    id: "81"
    isDisabled: false
    metadata:
      defaultStorageLocation: DWH
      error: null
      nodeMetadataSpec: |+
        capitalized: Aggregate View
        short: VAGG
        tagColor: '#C4C4C4'
        isDisabled: true
        plural: Views

        config:
          - groupName: Options
            items: 

            - displayName: COUNT DISTINCT
              type: columnSelector
              attributeName: isCountDistinct
              isRequired: false

            - displayName: SUM
              type: columnSelector
              attributeName: isSum
              isRequired: false
            
            - displayName: MIN
              type: columnSelector
              attributeName: isMin
              isRequired: false

            - displayName: MAX
              type: columnSelector
              attributeName: isMax
              isRequired: false

            - displayName: AVG
              type: columnSelector
              attributeName: isAvg
              isRequired: false

            - type: materializationSelector
              options:
                - view
              default: view
              isRequired: true
              enableIf: "false"

        systemColumns: 
        - displayName: RECORD_COUNT 
          transform: COUNT(*)
          dataType: INTEGER
          placement: end 
          attributeName: isCount

      templates:
        create:
          templateString: |+
            {% set source = sources[0] %}
            {{ stage('Create View') }}
            CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                AS
                SELECT 
                    {% for col in source.columns %}
                        {% if col.isSum  %}
                            SUM({{ get_source_transform(col) }})
                        {% elif col.isCountDistinct %}
                            COUNT(DISTINCT {{ get_source_transform(col) }})
                        {% elif col.isMin %}
                             MIN({{ get_source_transform(col) }})
                        {% elif col.isMax %}
                            MAX({{ get_source_transform(col) }})
                        {% elif col.isAvg %}
                            AVG({{ get_source_transform(col) }})
                        {% else %}
                            {{ get_source_transform(col) }}
                        {% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                {{ source.join }}
                GROUP BY 
                    {% for col in source.columns if not col.isSum and not col.isMin and not col.isMax and not col.isAvg and not col.isCountDistinct and not col.isCount -%}
                        {{ get_source_transform(col) }} {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

        run:
          templateString: ""
    name: Aggregate View
    version: 1
  StepType-85:
    id: "85"
    isDisabled: false
    metadata:
      defaultStorageLocation: STAGE
      error: null
      nodeMetadataSpec: |-
        capitalized: Snowpipe
        short: 'LOAD'
        tagColor: '#C39BD3'
        isDisabled: false
        plural: Snowpipe

        config:
        - groupName: File Location
          items: 

          - displayName: Stage
            attributeName: fileLocation
            type: dropdownSelector
            default: "DOUG_DB.PUBLIC.DOUGS3"
            options:
            - "DOUG_DB.PUBLIC.DOUGS3"
            - "Create external stages on Snowflake"
            - "Place them in the same storage location"
            - "List the storage locations in this dropdown"
            isRequired: true

          - displayName: File Pattern
            attributeName: filePattern
            type: textBox
            default: ".*[.]json"
            isRequired: true

        - groupName: File Format 
          items:
          - displayName: File Type
            attributeName: fileType
            type: dropdownSelector
            default: JSON
            options:
            - "CSV"
            - "JSON"
            - "Parquet"
            isRequired: true

          - displayName: Compression
            attributeName: compression
            enableIf: "{{ config.fileType in ['CSV','JSON'] }}" 
            type: dropdownSelector
            options:
            - "AUTO"
            - "GZIP"
            - "BZ2"
            - "BROTLI"
            - "ZSTD"
            - "DEFLATE"
            - "RAW_DEFLATE"
            - "NONE"
            isRequired: false

          - displayName: Record delimiter
            attributeName: recDelim
            type: textBox
            enableIf: "{{ config.fileType == 'CSV'}}" 
            default: "\n"
            isRequired: false

          - displayName: Field delimiter
            attributeName: fieldDelim
            type: textBox
            enableIf: "{{ config.fileType == 'CSV'}}" 
            default: ","
            isRequired: false

          - displayName: Field optionally enclosed by
            attributeName: fieldEnclosed
            type: textBox
            enableIf: "{{ config.fileType == 'CSV'}}" 
            default: "\\042"
            isRequired: false

          - displayName: Number of header lines to skip
            attributeName: skipHeader
            type: textBox
            enableIf: "{{ config.fileType == 'CSV'}}" 
            default: "1"
            isRequired: false

          - displayName: Skip blank lines
            attributeName: skipBlankLines
            enableIf: "{{ config.fileType == 'CSV'}}" 
            type: toggleButton
            default: true
            isRequired: false

          - displayName: Trim space
            attributeName: trimSpace
            enableIf: "{{ config.fileType == 'CSV'}}" 
            type: toggleButton
            default: true
            isRequired: false

        - groupName: Additional Options
          items:
          - displayName: Auto Ingest
            attributeName: autoIngest
            type: toggleButton
            default: true
            isRequired: false

          - displayName: AWS SNS Topic
            attributeName: snsTopic
            type: textBox
            enableIf: "{{ config.autoIngest }}"
            default: "arn:aws:sns:us-east-1:121674918127:prod-emea-s3-notification"
            isRequired: false

        - groupName: Hidden config
          enableIf: "false"
          items:
          - displayName: Type
            type: materializationSelector
            default: table
            options:
            - table
            isRequired: true

        systemColumns:

        - displayName: 'VALUE'
          attributeName: 'VALUE'
          transform: ''
          dataType: VARIANT
          placement: beginning
        - displayName: 'METADATA$FILENAME'
          attributeName: 'METADATA$FILENAME'
          transform: ''
          dataType: STRING
          placement: end
      templates:
        create:
          templateString: |+
            {% set source = sources[0] %}

            {{ stage('Create Landing table')}}
            CREATE OR REPLACE TABLE {{this}}
              {% if config.fileType == "CSV" %}
                {% for col in source.columns if (col.name | upper != "VALUE" and col.name | upper != "METADATA$FILENAME") %}
                  {% if loop.first %}({% endif %}
                    "{{ col.name }}" {{ col.dataType }} AS (value:c{{ loop.index }}::{{ col.dataType }})
                  {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                  {%- if not loop.last -%}, {% else %}){% endif %}
                {% endfor %}
              {% endif %}
              {% for col in source.columns if (col.name | upper == "VALUE" or col.name | upper == "METADATA$FILENAME") %}
                {% if loop.first %}({% endif %}
                  "{{ col.name }}" {{ col.dataType }} 
                {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                {%- if not loop.last -%}, {% else %}){% endif %}
              {% endfor %}

            {{ stage('Create Snowpipe') }}

            CREATE OR REPLACE PIPE {{ ref_no_link(node.location.name, 'PIPE_'+ node.name) }}
              auto_ingest = {{config.autoIngest}}
              {% if config.snsTopic | length > 0 %} aws_sns_topic = '{{config.snsTopic}}' {% endif %}
            AS
              COPY INTO {{ this }} (VALUE)
              FROM  @{{ config.fileLocation | upper  }}
              FILE_FORMAT = (TYPE = '{{ config.fileType }}');

        run:
          templateString: ""
    name: Snowpipe
    version: 1
  StepType-9:
    id: "9"
    isDisabled: false
    metadata:
      defaultStorageLocation: DWH
      error: null
      nodeMetadataSpec: |-

        capitalized: Satellite User-Defined
        short: 'SAT'
        plural: 'Satellites'
        tagColor: '#627DE9'

        config:
        - groupName: Options
          items:
          - displayName: Hub Hash Column
            type: columnSelector
            attributeName: isHubHash
            isRequired: true

          - displayName: Change Hash Column
            type: columnSelector
            attributeName: isChangeHash
            isRequired: true

        - groupName: Pre/Post SQL
          items:
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            isRequired: false

        systemColumns:
        - displayName: "LOAD_DATE"
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: "RECORD_SOURCE"
          transform: "''"
          dataType: VARCHAR
          placement: end
          attributeName: isSystemRecordSource
          
          
      templates:
        create:
          templateString: |

            {{ stage('Create Satellite Table') }}

            CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            (
            	{% for col in columns %}
            		"{{ col.name }}" {{ col.dataType }}
            		{%- if not col.nullable %} NOT NULL
            			{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            		{% endif %}
            		{%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
            		{%- if not loop.last -%}, {% endif %}
            	{% endfor %}
            )
            {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
        run:
          templateString: |-
            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}

            	{{ stage('Insert New Rows') }}
            	INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            	WITH "SAT_CURR_ROWS" AS (
            		/* get current rows from satellite */
            		{% for col in columns if col.isHubHash or col.isChangeHash %}
            			{%- if loop.first -%}SELECT {% endif %} 
            			{{col.name}}
            			{%- if not loop.last -%}, {% endif %}
            			{%- if loop.last %} 
            				FROM {{ ref_no_link(node.location.name, node.name) }} 
            				QUALIFY ROW_NUMBER() OVER (PARTITION BY "{{ get_value_by_column_attribute("isHubHash") }}" ORDER BY "{{ get_value_by_column_attribute("isSystemCreateDate") }}" DESC) = 1
            			{% endif %}
            		{% endfor %}
            	)

            		{% for source in sources %}
            			SELECT DISTINCT
            			{% for col in source.columns %}
            				{{ get_source_transform(col) }} AS "{{ col.name }}"
            				{%- if not loop.last -%}, {% endif %}
            			{% endfor %}

            			{{ source.join }}
            		WHERE NOT EXISTS(
            			SELECT 1 FROM "SAT_CURR_ROWS"
            			WHERE 
            			{% for col in source.columns if col.isHubHash or col.isChangeHash %}
            				{% if not loop.first %}
            					AND
            				{% endif %}
            				{{ get_source_transform(col) }} = "SAT_CURR_ROWS"."{{ col.name }}"
            			{% endfor %}
            		)

            		{% endfor %}

            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}

            {% endif %}
    name: Satellite
    version: 1
  StepType-98:
    id: "98"
    isDisabled: true
    metadata:
      defaultStorageLocation: STAGE
      error: null
      nodeMetadataSpec: |-
        capitalized: Copy of Copy Into
        short: 'COPY'
        tagColor: '#6ca37b'
        isDisabled: false
        plural: Copy Into
        config:
        - groupName: Source Data
          items:
          - displayName: Stage Name
            attributeName: stageName
            type: textBox
            default: '@'
            isRequired: true

          - displayName: File Name(s) (Optional - Use single quotes and commas)
            attributeName: fileNames
            type: textBox
            isRequired: false

          - displayName: File Pattern (Optional - Use single quotes)
            attributeName: filePattern
            type: textBox
            isRequired: false

        - groupName: File Format
          items:
          - displayName: File Format Definition
            attributeName: fileFormatType
            type: dropdownSelector
            default: "File Format Name"
            options:
            - File Format Name
            - File Format Values
          - displayName: File Format Name
            attributeName: fileFormatName
            type: textBox
            default: ""
            isRequired: false
            enableIf: "{% if config.fileFormatType == 'File Format Name' %} true {% else %} false {% endif %}"
          - displayName: File Type
            attributeName: fileType
            type: dropdownSelector
            default: CSV
            options:
            - "CSV"
            - "PARQUET"
            - "JSON"
            - "AVRO"
            - "ORC"
            - "XML"
            isRequired: false
            enableIf: "{% if config.fileFormatType != 'File Format Name' %} true {% else %} false {% endif %}"
          - displayName: Compression
            attributeName: compression
            enableIf: "{% if (config.fileFormatType != 'File Format Name' and config.fileType in ('CSV','JSON')) %} true {% else %} false {% endif %}"
            type: dropdownSelector
            default: "AUTO"
            options:
            - "AUTO"
            - "GZIP"
            - "BZ2"
            - "BROTLI"
            - "ZSTD"
            - "DEFLATE"
            - "RAW_DEFLATE"
            - "NONE"
            isRequired: false
          - displayName: Record delimiter
            attributeName: recDelim
            type: textBox
            enableIf: "{% if (config.fileFormatType != 'File Format Name' and config.fileType in ('CSV')) %} true {% else %} false {% endif %}"
            default: "\n"
            isRequired: false
          - displayName: Field delimiter
            attributeName: fieldDelim
            type: textBox
            enableIf: "{% if (config.fileFormatType != 'File Format Name' and config.fileType in ('CSV')) %} true {% else %} false {% endif %}"
            default: ","
            isRequired: false
          - displayName: Field optionally enclosed by
            attributeName: fieldEnclosed
            type: textBox
            enableIf: "{% if (config.fileFormatType != 'File Format Name' and config.fileType in ('CSV')) %} true {% else %} false {% endif %}"
            default: "\\042"
            isRequired: false
          - displayName: Number of header lines to skip
            attributeName: skipHeader
            type: textBox
            enableIf: "{% if (config.fileFormatType != 'File Format Name' and config.fileType in ('CSV')) %} true {% else %} false {% endif %}"
            default: "1"
            isRequired: false
          - displayName: Skip blank lines
            attributeName: skipBlankLines
            enableIf: "{% if (config.fileFormatType != 'File Format Name' and config.fileType in ('CSV')) %} true {% else %} false {% endif %}"
            type: toggleButton
            default: true
            isRequired: false
          - displayName: Trim space
            attributeName: trimSpace
            enableIf: "{% if (config.fileFormatType != 'File Format Name' and config.fileType in ('CSV')) %} true {% else %} false {% endif %}"
            type: toggleButton
            default: true
            isRequired: false
        - groupName: Copy Options
          items:
          - displayName: Truncate Target Flag
            attributeName: truncateTargetFlag
            type: toggleButton
            isRequired: true
            default: false
          - displayName: On Error Behavior
            attributeName: onError
            type: dropdownSelector
            options:
            - "CONTINUE"
            - "SKIP_FILE"
            - "SKIP_FILE_<num>"
            - "SKIP_FILE_<num>%"
            - "ABORT_STATEMENT"
            isRequired: false
          - displayName: Size Limit
            attributeName: sizeLimit
            type: textBox
            isRequired: false
          - displayName: Purge Behavior
            attributeName: purgeBehavior
            type: dropdownSelector
            default: FALSE
            options:
            - "TRUE"
            - "FALSE"
            isRequired: false
          - displayName: Return Failed Only
            attributeName: returnFailedOnly
            type: dropdownSelector
            default: FALSE
            options:
            - "TRUE"
            - "FALSE"
            isRequired: false
          - displayName: Match By Column Name
            attributeName: matchByColumnName
            type: dropdownSelector
            default: NONE
            options:
            - "CASE_SENSITIVE"
            - "CASE_INSENSITIVE"
            - "NONE"
            isRequired: false
            enableIf: "{% if config.fileType in ('JSON','AVRO','ORC','PARQUET') %} true {% else %} false {% endif %}"
          - displayName: Enforce Length
            attributeName: enforceLength
            type: dropdownSelector
            default: TRUE
            options:
            - "TRUE"
            - "FALSE"
            isRequired: false
          - displayName: Truncate Columns
            attributeName: truncateColumns
            type: dropdownSelector
            default: FALSE
            options:
            - "TRUE"
            - "FALSE"
            isRequired: false
          - displayName: Force
            attributeName: forceLoad
            type: dropdownSelector
            default: FALSE
            options:
            - "TRUE"
            - "FALSE"
            isRequired: false
          - displayName: Load Uncertain Files
            attributeName: loadUncertainFiles
            type: dropdownSelector
            default: FALSE
            options:
            - "TRUE"
            - "FALSE"
            isRequired: false
      templates:
        create:
          templateString: |
            {% set srcSchName = node.location.name %}
            {% set db = storageLocations | selectattr('name', 'equalto', srcSchName) | map(attribute='database') | first %}
            {% set sch = storageLocations | selectattr('name', 'equalto', srcSchName) | map(attribute='schema') | first %}

            {{ stage('Create Table') }}
            CREATE OR REPLACE TABLE "{{ db }}"."{{ sch }}"."{{ node.name }}" (
                {% for col in columns %}
                    "{{ col.name }}" {{ col.dataType }}
                {%- if col.Description | length > 0 %} COMMENT '{{ col.Description }}'{% endif %}
                {%- if not loop.last -%}, {% endif %}
            {% endfor %}
            )
        run:
          templateString: |-
            {% set srcSchName = node.location.name %}
            {% set db = storageLocations | selectattr('name', 'equalto', srcSchName) | map(attribute='database') | first %}
            {% set sch = storageLocations | selectattr('name', 'equalto', srcSchName) | map(attribute='schema') | first %}


            {%- if config.filePattern | length > 0 -%} 
                {%- set filePatternSQL = 'PATTERN = ' + config.filePattern -%} 
            {%- else -%}
                {%- set filePatternSQL = "" -%} 
            {%- endif -%}

            {%- if config.fileNames | length > 0 %} 
                {% set fileNameSQL = 'FILES = (' + config.fileNames + ')' %} 
            {%- else -%}
                {% set fileNameSQL = "" %} 
            {% endif %}

            {{ stage('Copy Into') }}
                COPY INTO "{{ db }}"."{{ sch }}"."{{ node.name }}" (
                    {%- for col in columns %}
                        "{{ col.name }}"
                    {%- if not loop.last -%}, {% endif %}
                    {%- endfor %}
                )
                FROM (SELECT
                    {%- for col in sources[0].columns %}
                        {{ col.transform }}
                    {%- if not loop.last -%}, {% endif %}
                    {%- endfor %}
                     FROM '@{{ db }}.{{ sch }}.{{ config.stageName }}') 
                {{- fileNameSQL }}
                {{ filePatternSQL }}
                FILE_FORMAT = (FORMAT_NAME = '{{ db }}.{{ sch }}.{{ config.fileFormatName}}')
    name: Copy Into
    version: 1
  StepType-99:
    id: "99"
    isDisabled: true
    metadata:
      defaultStorageLocation: STAGE
      error: null
      nodeMetadataSpec: |
        capitalized: Task DAG Create Root
        short: TGCR
        tagColor: red
        plural: None

        deployStrategy: advanced

        config: 
        - groupName: Sceduling Options
          items:
          - displayName: Sceduling Options
            attributeName: schedulingMode
            type: dropdownSelector
            default: Warehouse Task
            options:
              - Warehouse Task
              - Serverless Task
            isRequired: true

          - displayName: Select Warehouse on which to run task
            attributeName: whName
            type: textBox
            default: '<WAREHOUSE_NAME>'
            isRequired: false
            enableIf: "{% if config.schedulingMode == 'Warehouse Task' %} true {% else %} false {% endif %}"

          - displayName: Select initial serverless Warehouse size
            attributeName: serverlessSize
            type: dropdownSelector
            default: 'MEDIUM'
            options:
              - XSMALL
              - SMALL
              - MEDIUM
              - LARGE
              - XLARGE
              - XXLARGE
            isRequired: false
            enableIf: "{% if config.schedulingMode == 'Serverless Task' %} true {% else %} false {% endif %}"

          - displayName: Task Schedule
            attributeName: schedulePeriodOption
            type: dropdownSelector
            default: Minutes
            options:
              - Minutes
              - CRON
            isRequired: TRUE

          - displayName: Enter task schedule using minutes
            attributeName: schedulePeriod
            type: textBox
            default: '60'
            isRequired: false
            enableIf: "{% if config.schedulePeriodOption == 'Minutes' %} true {% else %} false {% endif %}"

          - displayName: Enter task schedule using CRON
            attributeName: scheduleCRON
            type: textBox
            default: '5 0-23 * * * America/Los_Angeles'
            isRequired: false
            enableIf: "{% if config.schedulePeriodOption == 'CRON' %} true {% else %} false {% endif %}"

          - displayName: Root task SQL
            attributeName: tskSql
            type: textBox
            default: 'select current_timestamp()'
            isRequired: true
      templates:
        create:
          templateString: |+
            {% if (currentState == undefined and desiredState != undefined) or (currentState != undefined and desiredState != undefined ) %}

            {# Target Task Info #}
            {% set tgtDb = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[0] %} 
            {% set tgtSch = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[1] %} 
            {% set taskName =desiredState.node.name %}
            {%- set fqTaskName = tgtDb + '.' + tgtSch + '."' + taskName + '"' -%} 

            {# Task Type #}
            {%- if desiredState.config.schedulingMode == 'Warehouse Task' -%} 
                {%- set taskType = 'WAREHOUSE = ' + desiredState.config.whName -%} 
            {%- else -%}
                {%- set taskType = 'USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE = ' + desiredState.config.serverlessSize -%} 
            {%- endif -%}

            {# Schedule Type #}
            {%- if desiredState.config.schedulePeriodOption == 'Minutes' -%} 
                {%- set whenRun = 'SCHEDULE = ' + "'" + desiredState.config.schedulePeriod + ' MINUTE' + "'" -%} 
            {% else %}
                {%- set whenRun = 'SCHEDULE = ' + "'" + 'USING CRON ' + desiredState.config.scheduleCRON %}
            {% endif %}

            {{ stage('Suspend Root Task') }}
            ALTER TASK IF EXISTS {{ fqTaskName }} SUSPEND

            {{ stage('Create Task') }}
            CREATE OR REPLACE TASK 
                    {{ fqTaskName }} 
                    {{ taskType}} 
                    {{ whenRun }} 
                AS 
            {{desiredState.config.tskSql }} 

            {{ stage('Try Enable Root Task') }}
            begin
                let sqlDml := 'select system$task_dependents_enable(''{{fqTaskName}}'')';
                execute immediate sqlDml;
                return 'Task resumed';
                    exception
                    when statement_error then
                        return 'Task already running';
            end;

            {% elif desiredState == undefined %}

            {% set tgtDb = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[0] %} 
            {% set tgtSch = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[1] %} 
            {% set taskName =currentState.node.name %}
            {%- set fqTaskName = tgtDb + '.' + tgtSch + '."' + taskName + '"' -%} 

            {{ stage('Suspend Root Task') }}
                ALTER TASK IF EXISTS {{ fqTaskName }} SUSPEND
            {{ stage('Drop Current Task Task') }}
                DROP TASK IF EXISTS {{ fqTaskName }} 

            {%- else -%}

            {{ stage('Nothing to do.') }}
            select 1 = 0

            {% endif %}

        run:
          templateString: ""
    name: Task DAG Create Root
    version: 1
  StepType-Dimension:
    id: Dimension
    isDisabled: true
    metadata:
      defaultStorageLocation: DWH
      error: null
      nodeMetadataSpec: |-
        capitalized: Dimension
        short: DIM
        tagColor: '#1E339A'
        plural: Dimensions

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table
            - view

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}"

          - type: businessKeyColumns
            isRequired: true

          - type: changeTrackingColumns
            isRequired: false

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: '{{NODE_NAME}}_KEY'
          transform: ''
          dataType: NUMBER
          placement: beginning
          attributeName: isSurrogateKey

        - displayName: SYSTEM_VERSION
          transform: ''
          dataType: NUMBER
          placement: end
          attributeName: isSystemVersion

        - displayName: SYSTEM_CURRENT_FLAG
          transform: ''
          dataType: VARCHAR
          placement: end
          attributeName: isSystemCurrentFlag

        - displayName: SYSTEM_START_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemStartDate

        - displayName: SYSTEM_END_DATE
          transform: CAST('2999-12-31 00:00:00' AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemEndDate

        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |
            {% if node.materializationType == 'table' %}
            	{{ stage('Create Dimension Table') }}

            	CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}" {{ col.dataType }}
            			{% if col.isSurrogateKey %}
            		        identity
            			{% endif %}
            			{%- if not col.nullable %} NOT NULL
            				{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            			{% endif %}
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}


            {% elif node.materializationType == 'view' %}
            	{{ stage('Create Dimension View') }}

            	CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}"
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            			{%- if not loop.last -%},{% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
            	AS
            	{% for source in sources %}

            		{% if loop.first %}SELECT {% endif %}

            		{% for col in source.columns %}
            			{% if col.isSurrogateKey or col.isSystemUpdateDate or col.isSystemCreateDate %}
                            NULL
            			{% else %}
                            {{ get_source_transform(col) }}
            			{% endif %}
            			AS "{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            		{{ source.join }}

            		{% if not loop.last %} UNION ALL {% endif %}
            	{% endfor %}

            {% endif %}
        run:
          templateString: |

            {% set is_type_2 = columns | selectattr("isChangeTracking") | list | length > 0 %}

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}

            	{% if config.preSQL %}			
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
                {% if is_type_2 %}

                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                        /* New Rows That Don't Exist */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_INITAL_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        LEFT JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                                {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "DIM"."{{ col.name }}" IS NULL
                        {% endfor %}
                        UNION ALL
                        /* New Row Needing To Be Inserted Due To Type-2 Column Changes */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                "DIM"."{{ col.name }}" + 1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_NEW_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Expired Due To Type-2 Column Changes
                        In this case, only two columns are merged (version and end date) */
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemEndDate %}
                                DATEADD(MILLISECONDS, -1, CAST(CURRENT_TIMESTAMP AS TIMESTAMP))
                            {% elif col.isSystemCurrentFlag %}
                                'N'
                            {% else %}
                                "DIM"."{{ col.name }}"
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'update_expired_version_rows' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Updated Due To Changes To Non-Type-2 source.columns
                        This case merges only when there are changes in non-type-2 column updates, but no changes in type-2 columns*/
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion or col.isSystemCreateDate or col.isSystemStartDate or col.isSystemEndDate %}
                                "DIM"."{{ col.name }}"
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                                {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'UPDATE_NON_TYPE2_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        AND (
                        {% for col in source.columns if (col.isChangeTracking) -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %} )
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isChangeTracking or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) -%}
                            {% if loop.first %}
                                AND (
                            {% endif %}
                            {% if not loop.first %}
                                OR
                            {% endif %}
                            NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                    ) AS "SRC"
                    ON
                    {% for col in source.columns if col.isBusinessKey -%}
                        {% if not loop.first %}
                            AND
                        {% endif %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                    {% endfor %}
                    AND "TGT"."{{ get_value_by_column_attribute("isSystemVersion") }}" = "SRC"."{{ get_value_by_column_attribute("isSystemVersion") }}"
                    WHEN MATCHED THEN UPDATE SET
                    {%- for col in source.columns if not (col.isBusinessKey or col.isSurrogateKey or col.isSystemCreateDate) %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    WHEN NOT MATCHED THEN INSERT (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )
                    VALUES (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )

                {% endfor %}



                {% else %}
                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string ) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                            SELECT
                            {% for col in source.columns if not col.isSurrogateKey %}
                                {% if col.isSystemVersion %}
                                	1
                                {% elif col.isSystemCurrentFlag %}
                                	'Y'
                                {% else %}
                                    {{ get_source_transform(col) }}
                                {% endif %}
                                AS "{{ col.name }}"
                                {%- if not loop.last %}, {% endif %}
                            {% endfor %}
                            {{ source.join }})
                            AS "SRC"
                        ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                        {% endfor %}
                        WHEN MATCHED
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            NVL( CAST("SRC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("TGT"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        THEN UPDATE SET
                        {%- for col in source.columns if not (  col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemCreateDate) %}
                                "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor %}
                        WHEN NOT MATCHED THEN
                        INSERT (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                        VALUES (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                    {% endfor %}
                {% endif %}
            	
            	{% if config.postSQL %}			
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Dimension
    version: 1
  StepType-Fact:
    id: Fact
    isDisabled: false
    metadata:
      defaultStorageLocation: DWH
      error: null
      nodeMetadataSpec: |
        capitalized: Fact
        plural: Facts
        short: FCT
        tagColor: '#D9A438'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            options:
            - table
            - view
          
          - type: businessKeyColumns
            isRequired: false

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |2-

                {% if node.materializationType == 'table' %}
                    {{ stage('Create Fact Table') }}
                
                    CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
                    (
                        {% for col in columns %}
                            "{{ col.name }}" {{ col.dataType }}
                            {%- if not col.nullable %} NOT NULL
                                {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                            {% endif %}
                            {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                            {%- if not loop.last -%}, {% endif %}
                        {% endfor %}
                    )
                    {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                
                
                {% elif node.materializationType == 'view' %}
                    {{ stage('Create Fact View') }}
                
                    CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                    (
                        {% for col in columns %}
                            "{{ col.name }}"
                            {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                            {%- if not loop.last -%},{% endif %}
                        {% endfor %}
                    )
                    {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                    AS
                    {% for source in sources %}
                
                        {% if loop.first %}SELECT {% endif %}
                
                        {% for col in source.columns %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                        {% endfor %}
                        {{ source.join }}
                
                        {% if not loop.last %} UNION ALL {% endif %}
                    {% endfor %}
                
                {% endif %}
                
        run:
          templateString: |2-

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

                {% if node.materializationType == 'table' %}
                    {% if config.preSQL %}
                        {{ stage('Pre-SQL') }}
                        {{ config.preSQL }}
                    {% endif %}
                    
                    {% set has_business_key = columns | selectattr("isBusinessKey") | list | length > 0 %}
                    
                    {% for source in sources %}
                    
                        {% if has_business_key %}
                    
                            {{ stage('MERGE ' + source.name | string ) }}
                            MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                            USING (
                                SELECT
                                {% for col in source.columns %}
                                    {{ get_source_transform(col) }} AS "{{ col.name }}"
                                    {%- if not loop.last %}, {% endif %}
                                {% endfor %}
                                {{ source.join }})
                                AS "SRC"
                            ON
                            {% for col in source.columns if col.isBusinessKey -%}
                                {% if not loop.first %}
                                    AND
                                {% endif %}
                                "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                            {% endfor %}
                            WHEN MATCHED
                            {% for col in source.columns if not (   col.isBusinessKey or
                                                                    col.isSystemUpdateDate or
                                                                    col.isSystemCreateDate) %}
                                {% if loop.first %}
                                    AND (
                                {% else %}
                                    OR
                                {% endif %}
                                NVL( CAST("SRC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("TGT"."{{ col.name }}" as STRING), '**NULL**')
                                {% if loop.last %}
                                    )
                                {% endif %}
                            {% endfor %}
                            THEN UPDATE SET
                            {%- for col in source.columns if not (col.isBusinessKey or col.isSystemCreateDate) %}
                                    "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                                {% if not loop.last %}, {% endif %}
                            {% endfor %}
                            WHEN NOT MATCHED THEN
                            INSERT (
                            {%- for col in source.columns if not col.isSurrogateKey %}
                                "{{ col.name }}"
                                {% if not loop.last %}, {% endif %}
                            {% endfor -%}
                            )
                            VALUES (
                            {%- for col in source.columns if not col.isSurrogateKey %}
                                "SRC"."{{ col.name }}"
                                {% if not loop.last %}, {% endif %}
                            {% endfor -%}
                            )
                    
                        {% else %}
                    
                            {{ stage('Insert ' + source.name | string ) }}
                    
                                INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
                                (
                                    {% for col in source.columns %}
                                        "{{ col.name }}"
                                        {%- if not loop.last -%},{% endif %}
                                    {% endfor %}
                                )
                    
                                SELECT
                                {% for col in source.columns %}
                                    {{ get_source_transform(col) }} AS "{{ col.name }}"
                                    {%- if not loop.last -%}, {% endif %}
                                {% endfor %}
                                {{ source.join }}
                        {% endif %}
                    {% endfor %}
                    {% if config.postSQL %}
                        {{ stage('Post-SQL') }}
                        {{ config.postSQL }}
                    {% endif %}
                {% endif %}

                {% if config.testsEnabled %}
                    {% for test in node.tests %}
                        {% if test.runOrder == 'After' %}
                            {{ test_stage(test.name, test.continueOnFailure) }}
                            {{ test.templateString }}
                        {% endif %}
                    {% endfor %}

                    {% for column in columns %}
                        {% for test in column.tests %}
                            {{ test_stage(column.name + ": " + test.name) }}
                            {{ test.templateString }}
                        {% endfor %}
                    {% endfor %}
                {% endif %}
                
                
    name: Fact
    version: 1
  StepType-Hub:
    id: Hub
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Hub
        short: 'HUB'
        plural: 'Hubs'

        tagColor: '#92712E'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            options: 
            - table
            default: table

          - displayName: Multi Source Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: UNION
            options:
            - "UNION"
            - "UNION ALL"
            isRequired: true
            enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: "LOAD_DATE"
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: "RECORD_SOURCE"
          transform: "''"
          dataType: VARCHAR
          placement: end
          attributeName: isSystemRecordSource
      templates:
        create:
          templateString: |-
            {% if node.materializationType == 'table' %}
            				{{ stage('Create Hub Table') }}
            			
            				CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in columns %}
            						"{{ col.name }}" {{ col.dataType }}
            						{%- if not col.nullable %} NOT NULL
            							{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            						{% endif %}
            						{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            						{%- if not loop.last -%}, {% endif %}
            					{% endfor %}
            				)
            				{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
            			
            			{% endif %}
        run:
          templateString: |2-

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}


            	{{ stage('Merge Hub') }}
            	MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT" USING
            	(
            		{% for source in sources %}
            		SELECT
            		{% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}

            		{{ source.join }}

            		{% if not loop.last %}
            			{{ config.insertStrategy }}
            		{% endif %}
            	{% endfor %}
            	)
            	AS "SRC"
            	ON
            	{% for col in sources[0].columns if (col.sourceColumns[0] 
                                                    and col.sourceColumns[0].column 
                                                    and col.sourceColumns[0].column.isHubHash
                                                    ) -%}
            		{% if not loop.first %}
            			AND
            		{% endif %}
            		"SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
            	{% endfor %}
            	WHEN NOT MATCHED THEN
            	INSERT
            	(
            		{% for col in columns %}
            			"{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	) VALUES
            	(
            		{% for col in columns %}
            			"SRC"."{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)


            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            	
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
            			
    name: Hub
    version: 1
  StepType-Link:
    id: Link
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Link
        short: 'LNK'
        plural: 'Links'
        tagColor: '#CA2287'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table

          - displayName: Multi Source Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: UNION
            options:
            - "UNION"
            - "UNION ALL"
            isRequired: true
            enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: "LOAD_DATE"
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: "RECORD_SOURCE"
          transform: "''"
          dataType: VARCHAR
          placement: end
          attributeName: isSystemRecordSource
      templates:
        create:
          templateString: |-
            {% if node.materializationType == 'table' %}
            				{{ stage('Create Link Table') }}
            			
            				CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in columns %}
            						"{{ col.name }}" {{ col.dataType }}
            						{%- if not col.nullable %} NOT NULL
            							{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            						{% endif %}
            						{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            						{%- if not loop.last -%}, {% endif %}
            					{% endfor %}
            				)
            				{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
            			
            			{% endif %}
        run:
          templateString: |2-

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	
            	{% endif %}

            			
            	{{ stage('Merge Link') }}
            	MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT" USING
            	(
            		{% for source in sources %}
            		SELECT
            		{% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}

            		{{ source.join }}

            		{% if not loop.last %}
            			{{ config.insertStrategy }}
            		{% endif %}
            	{% endfor %}
            	)
            	AS "SRC"
            	ON
            	{% for col in sources[0].columns if (col.sourceColumns[0] 
                                                    and col.sourceColumns[0].column 
                                                    and col.sourceColumns[0].column.isLinkHash
                                                    ) -%}
            		{% if not loop.first %}
            			AND
            		{% endif %}
            		"SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
            	{% endfor %}
            	WHEN NOT MATCHED THEN
            	INSERT
            	(
            		{% for col in columns %}
            			"{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	) VALUES
            	(
            		{% for col in columns %}
            			"SRC"."{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)

            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}	
            	{% endif %}
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
            			
    name: Link
    version: 1
  StepType-Satellite:
    id: Satellite
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Satellite
        short: 'SAT'
        plural: 'Satellites'
        tagColor: '#627DE9'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table

          - displayName: Multi Source Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: UNION
            options:
            - "UNION"
            - "UNION ALL"
            isRequired: true
            enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: "LOAD_DATE"
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: "RECORD_SOURCE"
          transform: "''"
          dataType: VARCHAR
          placement: end
          attributeName: isSystemRecordSource
      templates:
        create:
          templateString: |-
            {% if node.materializationType == 'table' %}
            				{{ stage('Create Satellite Table') }}
            			
            				CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in columns %}
            						"{{ col.name }}" {{ col.dataType }}
            						{%- if not col.nullable %} NOT NULL
            							{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            						{% endif %}
            						{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            						{%- if not loop.last -%}, {% endif %}
            					{% endfor %}
            				)
            				{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
            			
            			{% endif %}
        run:
          templateString: |2-

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            		{% if config.preSQL %}
            			{{ stage('Pre-SQL') }}
            			{{ config.preSQL }}
            		{% endif %}
            	
            		{{ stage('Merge Satellite') }}
            		MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT" USING
            		(
            			{% for source in sources %}
            			SELECT
            			{% for col in source.columns %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"
            				{%- if not loop.last -%}, {% endif %}
            			{% endfor %}
            	
            			{{ source.join }}
            	
            			{% if not loop.last %}
            				{{ config.insertStrategy }}
            			{% endif %}
            		{% endfor %}
            		)
            		AS "SRC"
            		ON
            		{% for col in sources[0].columns if (col.sourceColumns[0] 
                                                        and col.sourceColumns[0].column 
                                                        and col.sourceColumns[0].column.isChangeHash
                                                        ) -%}
            			{% if not loop.first %}
            				AND
            			{% endif %}
            			"SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
            		{% endfor %}
            		WHEN NOT MATCHED THEN
            		INSERT
            		(
            			{% for col in columns %}
            				"{{ col.name }}"
            				{%- if not loop.last -%}, {% endif %}
            			{% endfor %}
            		) VALUES
            		(
            			{% for col in columns %}
            				"SRC"."{{ col.name }}"
            				{%- if not loop.last -%}, {% endif %}
            			{% endfor %}
            		)
            	
            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}	
            	{% endif %}
            	
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
            			
    name: Satellite
    version: 1
  StepType-Source:
    id: Source
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Source
        short: null
        tagColor: '#D26000'
        plural: Sources
      templates:
        create:
          templateString: |
            {{ stage('Validating Source Exists') }}
            SELECT 1 FROM {{ ref(node.location.name, node.name) }} LIMIT 0
        run:
          templateString: |
            {{ stage('Validating Source Exists') }}
            SELECT 1 FROM {{ ref(node.location.name, node.name) }} LIMIT 0
    name: Source
    version: 1
  StepType-Stage:
    id: Stage
    isDisabled: false
    metadata:
      defaultStorageLocation: STAGE
      error: null
      nodeMetadataSpec: |
        capitalized: Stage
        short: STG
        plural: Stages
        tagColor: '#2EB67D'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            default: table
            options:
            - table
            - view
            isRequired: true

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}" 

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"
            
          - displayName: Multi Source Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: INSERT
            options:
            - "INSERT"
            - "UNION"
            - "UNION ALL"
            isRequired: true
            enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

          - displayName: Truncate Before
            attributeName: truncateBefore
            type: toggleButton
            default: true

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false
      templates:
        create:
          templateString: |
            {% if node.override.create.enabled %}
            	
            	{{ node.override.create.script }}

            {% elif node.materializationType == 'table' %}
            	{{ stage('Create Stage Table') }}

            	CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}" {{ col.dataType }}
            			{%- if not col.nullable %} NOT NULL
            				{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            			{% endif %}
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}


            {% elif node.materializationType == 'view' %}
                {{ stage('Create Stage View') }}

                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                AS
                {% for source in sources %}
                    SELECT
                    {% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

                    {{ source.join }}

                    {% if not loop.last %}
                        {% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
                            {{ config.insertStrategy }}
                        {% else %}
                            UNION
                        {% endif %}
                    {% endif %}
                {% endfor %}

            {% endif %}
        run:
          templateString: |2

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
            	
            	
            		{% if config.truncateBefore %}
            	
            			{{ stage('Truncate Stage Table') }}
            			TRUNCATE IF EXISTS {{ ref_no_link(node.location.name, node.name) }}
            	
            		{% endif %}
            	
            	
            		{% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
            			{{ stage( config.insertStrategy + ' Sources' | string ) }}
            			INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in columns %}
            						"{{ col.name }}"
            						{%- if not loop.last -%},{% endif %}
            					{% endfor %}
            				)
            		{% endif %}
            	
            	
            		{% for source in sources %}
            	
            			{% if config.insertStrategy == 'INSERT' %}
            				{{ stage('Insert ' + source.name | string ) }}
            	
            				INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in source.columns %}
            						"{{ col.name }}"
            						{%- if not loop.last -%},{% endif %}
            					{% endfor %}
            				)
            			{% endif %}
            	
            			SELECT
            			{% for col in source.columns %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"
            				{%- if not loop.last -%}, {% endif %}
            			{% endfor %}
            	
            			{{ source.join }}
            	
            			{% if config.insertStrategy in ['UNION', 'UNION ALL'] and not loop.last %}
            				{{config.insertStrategy}}
            			{% endif %}
            	
            		{% endfor %}
            	
            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Stage
    version: 1
  StepType-View:
    id: View
    isDisabled: false
    metadata:
      defaultStorageLocation: DWH
      error: null
      nodeMetadataSpec: |
        capitalized: View
        short: V
        tagColor: '#C4C4C4'
        isDisabled: true
        plural: Views

        config:
          - groupName: Options
            items: 
            - type: materializationSelector
              options:
                - view
              default: view
              isRequired: true

            - type: toggleButton
              attributeName: selectDistinct
              displayName: Distinct

            - type: multisourceToggle

            - type: overrideSQLToggle

            - displayName: Multi Source Strategy
              attributeName: insertStrategy
              type: dropdownSelector
              default: UNION
              options:
              - "UNION"
              - "UNION ALL" 
              isRequired: true
              enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"
      templates:
        create:
          templateString: |
            {% if node.override.create.enabled %}
                
                {{ node.override.create.script }}

            {% else %}
                {{ stage('Create View') }}
                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                AS
                {% for source in sources %}
                    SELECT {% if config.selectDistinct %} DISTINCT {% endif %}
                    {% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

                    {{ source.join }}

                    {% if not loop.last %}
                        {% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
                            {{ config.insertStrategy }}
                        {% else %}
                            UNION
                        {% endif %}
                    {% endif %}
                {% endfor %}
            {% endif %}
        run:
          templateString: ""
    name: View
    version: 1
  StepType-persistentStage:
    id: persistentStage
    isDisabled: true
    metadata:
      defaultStorageLocation: STAGE
      error: null
      nodeMetadataSpec: |
        capitalized: Persistent Stage
        short: PSTG
        plural: Persistent Stages
        tagColor: '#29B2DB'
            
        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table
            - view
          
          - type: businessKeyColumns
            isRequired: false

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}"

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:

        - displayName: '{{NODE_NAME}}_KEY'
          transform: ''
          dataType: NUMBER
          placement: beginning
          attributeName: isSurrogateKey

        - displayName: SYSTEM_VERSION
          transform: ''
          dataType: NUMBER
          placement: end
          attributeName: isSystemVersion

        - displayName: SYSTEM_CURRENT_FLAG
          transform: ''
          dataType: VARCHAR
          placement: end
          attributeName: isSystemCurrentFlag

        - displayName: SYSTEM_START_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemStartDate

        - displayName: SYSTEM_END_DATE
          transform: CAST('2999-12-31 00:00:00' AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemEndDate

        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |
            {% if node.materializationType == 'table' %}
                {{ stage('Create Persistent Stage Table') }}

                CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}" {{ col.dataType }}
                        {% if col.isSurrogateKey %}
            		        identity
                        {% endif %}
                        {%- if not col.nullable %} NOT NULL
                            {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                        {% endif %}
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}


            {% elif node.materializationType == 'view' %}
                {{ stage('Create Persistent Stage View') }}

                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%},{% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                AS
                {% for source in sources %}

            		{% if not loop.last %} UNION ALL {% endif %}
            	{% endfor %}

                    {% for col in source.columns %}
                        {% if col.isSurrogateKey or col.isSystemUpdateDate or col.isSystemCreateDate %}
                            NULL
                        {% else %}
                            {{ get_source_transform(col) }}
                        {% endif %}
                        AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                    {{ source.join }}

            {% endif %}
        run:
          templateString: |-

            {% set has_business_key = columns | selectattr("isBusinessKey") | list | length > 0 %}
            {% set is_type_2 = columns | selectattr("isChangeTracking") | list | length > 0 %}

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
                {% if has_business_key and is_type_2 %}

                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                        /* New Rows That Don't Exist */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_INITAL_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        LEFT JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                                {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "DIM"."{{ col.name }}" IS NULL
                        {% endfor %}
                        UNION ALL
                        /* New Row Needing To Be Inserted Due To Type-2 Column Changes */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                "DIM"."{{ col.name }}" + 1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_NEW_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Expired Due To Type-2 Column Changes
                        In this case, only two columns are merged (version and end date) */
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemEndDate %}
                                DATEADD(MILLISECONDS, -1, CAST(CURRENT_TIMESTAMP AS TIMESTAMP))
                            {% elif col.isSystemCurrentFlag %}
                                'N'
                            {% else %}
                                "DIM"."{{ col.name }}"
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'update_expired_version_rows' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Updated Due To Changes To Non-Type-2 source.columns
                        This case merges only when there are changes in non-type-2 column updates, but no changes in type-2 columns*/
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion or col.isSystemCreateDate or col.isSystemStartDate or col.isSystemEndDate %}
                                "DIM"."{{ col.name }}"
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                                {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'UPDATE_NON_TYPE2_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        AND (
                        {% for col in source.columns if (col.isChangeTracking) -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %} )
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isChangeTracking or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) -%}
                            {% if loop.first %}
                                AND (
                            {% endif %}
                            {% if not loop.first %}
                                OR
                            {% endif %}
                            NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                    ) AS "SRC"
                    ON
                    {% for col in source.columns if col.isBusinessKey -%}
                        {% if not loop.first %}
                            AND
                        {% endif %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                    {% endfor %}
                    AND "TGT"."{{ get_value_by_column_attribute("isSystemVersion") }}" = "SRC"."{{ get_value_by_column_attribute("isSystemVersion") }}"
                    WHEN MATCHED THEN UPDATE SET
                    {%- for col in source.columns if not (col.isBusinessKey or col.isSurrogateKey or col.isSystemCreateDate) %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    WHEN NOT MATCHED THEN INSERT (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )
                    VALUES (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )

                {% endfor %}

                {% elif has_business_key and not is_type_2 %}
                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string ) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                            SELECT
                            {% for col in source.columns if not col.isSurrogateKey %}
                                {% if col.isSystemVersion %}
                                	1
                                {% elif col.isSystemCurrentFlag %}
                                	'Y'
                                {% else %}
                                    {{ get_source_transform(col) }}
                                {% endif %}
                                AS "{{ col.name }}"
                                {%- if not loop.last %}, {% endif %}
                            {% endfor %}
                            {{ source.join }})
                            AS "SRC"
                        ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                        {% endfor %}
                        WHEN MATCHED
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            NVL( CAST("SRC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("TGT"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        THEN UPDATE SET
                        {%- for col in source.columns if not (  col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemCreateDate) %}
                                "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor %}
                        WHEN NOT MATCHED THEN
                        INSERT (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                        VALUES (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                    {% endfor %}
                {% else %}
                    {% for source in sources %}
                        {{ stage('Insert ' + source.name | string ) }}
                        INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
                        (
                            {% for col in source.columns if not col.isSurrogateKey %}
                                "{{ col.name }}"
                                {%- if not loop.last -%},{% endif %}
                            {% endfor %}
                        )

                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}

                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                                {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                            
                        {% endfor %}
                        {{ source.join }}
                    {% endfor %}            
                {% endif %}
            	
            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            	
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Persistent Stage
    version: 1
subgraphs:
  Subgraph-91:
    id: "91"
    name: Extended
    steps:
      - 3de00470-5825-4056-87e4-4a274afa4a0b
      - 06fe1455-4ab1-479f-8f83-275b61643a94
      - 66c1ea12-f242-4f39-96a8-ce7ac16ebca7
      - 5f84a3f7-6dd6-440a-8774-0986d610d971
      - 579510ad-4e77-4e0c-953b-695720fc05bc
      - 290e88a1-49e5-4a4c-8347-c9731d38f9f1
      - 610c4a22-3036-40ba-8dec-380b161ce9f6
      - 48461088-55f2-423c-a08b-833be8256421
      - a1e6001e-ed8c-4ab7-be61-5102415017bc
      - 3fb67404-822f-40ca-9641-f4c717e58cdf
      - de688fc6-61ff-479a-98ee-253ffd533813
      - 46e4a2b3-404c-45bc-940e-9828607e6b19
      - e3ef28b7-f8b9-4c65-aebe-e42f3a77f0a7
      - a78cac8f-60e0-4a1a-a1a0-f59c6aa663cc
      - 08396a5e-cbd1-4785-a5fa-27008afa0407
      - acee8d78-b1ae-4cb8-a83d-e5ca1f2a4358
      - 9cac498e-478f-4546-9ac6-9bfab88a3284
      - a684acab-8a9d-46d2-91ce-4d2537304bcb
      - 9c6bf935-194d-48b7-892d-6b728d4bc0f4
      - 2bd8ef38-6cf4-48c2-ae21-361a9f6c0b47
      - 0b65d7ce-2b04-4b0e-8a0a-c27e48028edf
      - e218996e-fc0a-4aae-9c4f-4181dab7818e
      - 9b9ece04-5620-44d2-a873-d140be2c3f8b
      - 17746880-1be1-40c6-b7b5-bff4ab961637
      - b81622ba-bd96-4c98-9285-184cd904bac7
      - 73f5b7e2-eec9-4c9f-ad39-eae80a5759b4
      - 37a4634d-8215-420d-b37a-8e24ed488bf6
      - d9d5ede2-f417-4f3e-9a7e-37355998a119
      - 2ac9e08f-c4f8-41b1-8633-3af597c76196
      - 329e2cdf-bd76-43bb-853d-8e33a707f17f
      - 6027e331-6c18-4f0d-9d4f-fb248001d4e1
      - d4b9225b-34d5-49c0-9016-ea0342cf7bae
      - 289d808d-a001-476f-8968-cea72e678d0d
      - 37b6cb3e-5e44-4ae8-8275-d362def0d2fe
      - 6b686767-5406-4520-bd3e-fd840d859843
      - 1970a7af-f1c3-43d7-ba97-9b0909af89f3
      - a657a032-6e8c-4573-ad0d-072f37c4746b
      - 7336edd2-19e9-43f4-9a67-6e174d2a91df
      - 91bb2125-7d67-48de-8cad-ab1b65427b6e
      - 9e772c08-b34c-4665-b178-ff606d71d14c
      - 085d3a91-b702-4503-852a-88f5554cbfa3
      - 59d5c050-dd95-4236-b09c-e2036a99d29b
      - f9efbeda-136c-46fe-b032-a84567f32de1
      - 1883cb10-ca55-4cb9-a025-5e0e3e8cf842
      - 1f44e3ed-6ff6-4990-ba12-dc37e3dc73ee
      - c628d988-79c9-42fe-b91e-9181921bf1ac
      - d4c5e026-2344-47d4-8aeb-adc26cad5894
      - e5257b17-5936-4493-aee6-9ae514c0b77d
      - b0e039cb-e89a-45e0-8f98-200785bca16c
      - 3438b190-c041-4520-944b-74ec38e7ea64
      - d0a63d7e-631f-4ab6-a73c-636e9c805cca
      - 6bd96b4f-2650-4efc-8b44-93768399fab1
      - ab283428-0d0f-4f20-81e1-b82447ce4737
      - 2671e054-9410-4a7e-a5d0-4852da5d60a8
      - 22fcfbc3-6f90-477b-b70a-cc8124fb889a
      - b6f57dc0-ad23-4ce9-a16f-747913d520a3
      - 52f071fd-6c77-4515-86e9-204eb0b5d364
      - 4513bdb6-2711-4a0f-89e8-16cb49374152
      - 9256d363-2019-4a09-8112-baf8a3807e7e
      - 11f2a5b2-9aa2-4cae-9849-22788c63bcd7
      - 15e2a89c-7198-4f16-b401-3d6bbbced33b
      - 741812c5-599b-4a9d-829d-cd7ab6c37f2d
      - 0b588dd0-2396-472f-90f7-b53c041121b5
      - 7ee4a212-1879-4986-a59a-6b4b7e31cd0b
      - c5627bd7-0d36-4bc8-937f-4c4aada81bf3
      - 847458f8-8169-4a03-9065-544811bb381b
      - c97a44f3-24fc-4704-b35d-4fd81c85c635
      - 9d34e81c-c0ff-49ca-ad4a-0951f33bf9ba
      - 9e5885fb-fac5-4e4e-a627-a4609d7f03fe
      - d6e8e2d7-d015-47e5-a067-13b5fb2249ed
      - 0e18723e-b8e7-42a7-a62f-e159024c2f31
      - e6abeb58-a5f8-4ea5-87ee-92a5b23403a7
      - 35eabdf2-4f74-45f2-8b4d-56c8e15345a8
      - b1117b5c-b31c-42f8-904f-631490699273
      - a04a4cd7-30dd-4400-b19a-f0b005f9fc94
      - b51b5fe3-61ee-4ece-9e44-ab909be8d583
      - 133eaeb0-89ab-4b0f-9c1a-28702f12202e
      - 265ca973-a1c9-4b20-a09b-95f18e1c26b7
      - 86285660-7ef3-4b69-849f-90b26bfec495
      - acf94c73-13d9-4165-9080-780d87918a43
      - 5d796656-19e8-4316-8b28-fe915209d5f1
      - 7ad78ef3-a960-43cf-803b-8661b5032eda
      - ec3bf442-7739-41ba-b65c-de49ff3f83f9
      - 11c7b1ef-93d5-4ce3-9cb8-4b9e1d19e6fd
      - 3806ca85-e453-4880-91ce-aab9897de118
      - 2c807fb6-452f-428c-b339-3e774080697d
      - e50a713a-0148-4fe9-9e38-e9c7b2322057
      - 4cac6e7e-9141-4e06-88d4-307212b22b93
      - 3988ab9f-9661-4d22-b706-4c81cae4591a
      - 80dbc50d-a424-42a4-a336-9a8a905c91ef
      - bb8a15d2-c195-496c-8d77-ecc4a82772d0
      - e2615a2f-76d3-4e3f-b553-94b310d20905
      - f1fd40ff-a681-439b-bc84-dd1f3cc9daa1
      - 01449488-9d21-4ee1-9e34-240460e59b44
      - 2fb8766b-8061-4136-b2f6-31cf0e530f41
      - ba3c5f0e-8d79-45d1-95e3-245130ae7e3e
      - 827a9800-8788-4908-b8fb-a0e9129f2a9e
      - f260e9d1-6698-4cbd-97dd-73689897c88d
      - 5e27cfff-fd2e-4971-8c16-b83d5fc23fb6
      - a26f357b-f6ea-45c1-a991-7b24b53be346
      - ad5c8e75-24bf-4bec-9195-b7cb974a8d9c
      - 7054fa4e-7e62-4896-8bae-8c875bad5a7a
      - bc299025-ab9d-4203-a455-d6a5ff1a642e
      - 864d5390-eeb9-45cd-bd5a-e611e777fc98
      - 2bf94052-8c42-48cf-a9bc-b9735a98f6aa
      - 66ffe18b-e56b-4dc2-9ea2-42919efec00f
      - 28f6ffda-c7ed-4fdf-809a-e365fa5f120a
      - 4d7a2d3d-db08-470d-b62a-08e66c230d95
      - 0d8edaa6-e551-4d23-81e8-a5e2ff60d53a
      - 0df70bbb-73d3-4b8c-aa79-f0ff4232be59
      - 96b4e9e6-6651-4367-a3c9-fea0376bc595
      - 122234c4-2458-4c33-af93-663d7d57c7cf
      - cc416a6d-861f-46a4-a8e7-f2e84ed143d9
      - 54caa2ac-5495-4d5c-875a-b9f01d83f9c1
      - bb66438d-b6aa-481a-9205-efe06f974be3
      - 156ac564-3cd3-40b9-817c-042d24e33dcc
      - a467926a-3352-4b6d-9191-c76afd031a9b
      - d644bcfa-2bcb-4024-b99f-ecc6ac3b2130
      - 7b5a2bfe-f90a-40be-9fbe-4298a7c8692f
      - 09750fac-dd60-44bd-b591-e8855d100ba4
      - ac00952e-fb94-488d-9b38-6d4ed7689298
      - fcb0be78-3c78-44f7-b3cc-bd92c8769ec2
      - eca4f5b3-aad8-422b-92af-760f38e4e214
      - 9d35dfb6-4d43-4b16-a541-2a1b46e8190a
      - 0a219e34-8374-49d9-a061-4b6a5b0977ca
      - bbbc7a90-3d75-4182-bab3-c059bc786a99
      - 51188fdd-a0ed-403c-b410-cf09f1ed96ee
      - bbe8bc1e-ea51-4d40-93e6-6d465e31635b
      - d75864b5-0327-40dd-8b5b-c26966b060cd
      - fda21757-6b94-4270-a0f6-21368c27981d
      - 945e6d22-20e7-40e1-8515-2e995dcf5aa6
      - 00da5756-7919-4670-8a0f-7a2f3832f517
      - 9228804e-0bc2-4669-97be-bb4105ca5bba
      - 5032d162-786b-4972-b104-1fbf74345c6f
      - 5ae81030-dab2-4f5e-aba0-bbb08d9ee1b9
      - eef877e5-d6f6-420c-a832-d951ecbb0d71
      - c7a5bbca-50d7-4fe2-ab68-18cd7af2f5fd
      - af1c2ef6-b433-46dd-b040-95a7b9dce7c1
      - 4f3be70d-8767-40e6-aa16-0fbc95e56e11
      - 3991331a-2bd9-4900-be2b-5c824c152d0c
      - a568fc40-570e-4cf0-93f5-f23873f3c63d
      - 5601a732-723a-44c1-abba-8fcaaa5fb09a
      - f06ebf15-367b-48f5-87db-052c6e9eb733
      - 2e14b99f-a4c7-473b-a280-4e4c7d94180b
      - a446fbad-3b4d-46c4-9e6f-f3b79f6b046c
      - 5f90b57d-be6d-4186-9f0b-a74907356e98
      - 2022ae50-1a98-4784-8885-0ebcb217b102
      - 4344b8e5-d14e-4f65-9dc5-6b47e5abc83f
      - 21aeab8d-b6ab-4dc0-8199-fe16963fb7bf
      - bf037139-aac8-4d8a-837f-60ee38c02313
      - 7a197a0d-2e0b-4407-94ed-dce8db361260
      - 383d3aac-06fc-443a-9bb0-4475f748cf12
      - 45e160d2-886b-4e3f-8b7c-c8b83fd645e6
      - e04af7ce-b827-44f3-94b4-9f3d98502321
      - 95278123-c6b2-4a87-88ef-053ffcd2c15c
      - 2d783afe-b566-497d-b872-0085c5a2822b
      - 7345b48b-ba6f-4253-b71e-9573b6e3e01b
      - b8c29a69-5479-464f-a42e-b9afd3db742b
      - 067ff80c-a8b1-48b3-b51c-0ff2e93f3120
      - 8116524c-b4bb-4fa0-8e39-9e93d105881d
      - e7038edd-4d7c-4a06-9b1d-8d7bcc3e4da0
      - c5bcc50b-9554-4e29-a5c7-e60d572fde4d
      - 7b798863-50a9-4163-af35-3aebbbc78bab
      - dba6d0a0-d81f-4945-af9c-815c1f61b9bb
      - 5c3e8a4d-e26a-4a0f-849f-fea450d8351a
      - 1f4d454f-50c2-4b60-96f1-44998852b747
      - f561adfa-56b2-4537-8260-41448f6dfece
      - bc837fbf-de99-4fac-8b78-029cd9897fe3
      - 31672066-11a8-416b-bf2a-e9fbeffb48dc
      - 2e4f29a5-23dd-43dd-8176-7278454149a5
      - 9b3be6d3-0c2c-459e-a8bf-e13044914403
      - 26947a82-e227-47f3-8a25-f416d767f483
      - fbd32c8e-33ba-4e86-ada2-ea79782b4642
      - d6e8d869-31eb-4c73-a2c5-4f3b03400ac6
      - 88a8392c-51f5-42e9-b7f4-2d834eef8020
      - 5bd4a55e-b5be-464c-9f83-f9401b64c707
      - f93f6a3d-6f82-4def-93e2-2e8ced71c1f0
      - 8f7235a4-7046-4206-a6f2-ee7ea0e4cd00
      - f2efad21-aceb-4e01-a95a-ad18249c4177
      - e32833dd-3acc-428e-ae06-4ac4f6098a21
      - e42ae199-9ae4-4113-89f9-2cd33a977ad3
      - 8b2985b6-8e12-4cf2-95a8-9b527f8bbadb
      - b0761b06-0c42-4997-a8a8-d1c49bb0bdc3
      - 39045ca0-c86e-4fc0-8274-f058163ce084
      - 306329e1-3310-423c-8a67-becb9455f95a
      - b1722a8b-bf54-4425-8cfb-14839126b4ed
      - 30179a83-7338-4187-a359-0c46bc3bdca6
      - a9c8efda-40dc-4a35-9103-14056dce636e
      - 4c71e085-0c31-480e-99ac-08d6ee9e7e97
      - fdc8d5f6-4c34-4351-883a-ec18d0ac4171
      - 78708320-71d3-4e11-9dd4-05dc06ef2c20
      - 4b7a063d-6312-45fd-b6d8-ec1212ffabdb
      - 50691bdd-39bf-4dd5-89dc-56ff812b07c9
      - 5eecfd31-2465-4d97-be7c-d25a92296f31
      - de25e6fc-4db5-4a38-8fd8-9745d16d7722
      - d2ff2d69-570a-4bbd-8986-250c6681cefa
      - c7e449c4-2144-4250-aed6-56b6a5553ccd
      - 7d68155e-a89e-4db2-8396-afac73953f48
      - 84833cdd-4110-4e9c-b49c-4dc912e48642
      - eee7904e-1d49-4e7d-aad1-3583ef2488a9
      - 62d60e96-ecac-4143-b18f-4dc895be2e96
      - 23659bdf-da52-453f-b244-12235d875d71
      - bc5b20b4-f076-4c8e-b5b2-29985d8cf6c4
      - 94d5403e-0910-46b5-936a-4ce8c7337cc3
      - bb57d904-9a89-45ad-85e6-64c15665dc47
      - 5945cad1-8bef-4ff9-ba2e-64534ce387cb
      - 4f9eabcc-5a8c-407c-9677-30b64dbaeac9
      - f8cd658a-8c2b-4e04-92b9-86ab0c564705
      - ffaa69f0-d59e-4efd-83b8-a3f1296ed4fd
      - 1c18d312-cd7d-4700-a5f2-c83e4904f716
      - cccf834a-1a14-44dc-8a88-bb4b96812640
      - 30e343f7-e929-44b7-81ba-6f7faf11ac36
      - 17ebd5c8-1e4d-4631-877a-db3bd0106706
      - a400dc73-7c44-40d4-b863-c15b5d1f4d88
      - fee06af9-5cac-4fa2-bcdb-2f0dde6f8348
      - c630d3cc-95c4-4aab-b8a5-4b3a86897cdf
      - 1995b7bb-0452-4fa5-a076-3ac2fb57371c
      - f9ca4cdf-43c4-4a80-b99d-9be0fd868e5a
      - 8aa6f509-1702-409c-bdd6-8b792fd96949
      - e4120fe0-164a-474f-af61-1651f98f0e05
      - 1ad40b3d-67b6-46c0-b00c-c7130b866810
      - b9d88418-2209-443b-8b0d-94ed801abb2f
      - fc40ee92-07a1-41cc-9757-7ca62d948ff6
      - 5d75298d-7658-492c-b866-ece66341bee3
      - 06a0d7b5-c1a7-4182-bfde-8e3dfb012f27
      - 57c3d5a3-25d1-4094-941c-3bd8f217895a
      - bfe637aa-f56a-4ef8-bd6b-0ac8c277d667
      - b4ebac7a-ede1-4f3c-aa89-521dd216ec4c
      - d60a8076-7571-4e42-8127-d4eb7c6521fd
      - 38ee341b-47c8-43e0-b058-e5ef7e478444
      - 9b9e18d6-fb64-4433-b102-f3eb9487a06c
      - 9fb6e061-89c7-46d1-8b90-6cb9754155d3
      - c545b53c-24a7-429f-a5d2-20c96ff9c33e
      - 508f4bce-3fd6-4ab0-be4a-8d0283edde69
      - e5f9fabd-ce68-41ff-91a4-db8322bf565e
      - 24631a24-5012-4fa2-834c-0d4cbe5a4947
      - 37d89131-7e0b-4fff-8052-f5b257e96907
      - 8e78d969-de6d-4496-8e38-e3ec3866c47b
      - 323b3d77-aa11-487c-94bc-e2f66063378f
      - 414aed27-cca3-4a1e-81c8-9cbeb0590730
      - 3d6a3251-7ffe-4d58-8c7b-b544f981e7fa
      - c72b217f-e2fb-4194-935f-0417badd30dd
      - b66c315e-fbf4-4a66-8a56-73e3fb5076f0
      - ca71c070-a00c-4811-877e-52172ad5fb1a
      - b1f13ac3-206d-4c9b-a515-43d753fa90ba
      - 8f5d1226-0a44-4298-9b3e-b3e193287cb9
      - 5d18e574-450d-4806-ab81-e55222857ea6
      - 31c18423-dd89-4d2e-99f1-d1fb69e2fa62
      - a5aac1ab-856f-49ff-8bb8-7f46ac18794c
      - f105afa5-7af1-4a9a-9c7f-3a6be5c3f9d7
      - 5ddf5f53-8ff2-40ba-907e-5216592214d3
      - fc54e9f6-1875-44fd-bac1-810d252f4f22
      - 1ec7e46c-bc52-4f66-895b-46b47bacc332
      - 58af5a2f-2858-4183-bf50-d181369dc08e
      - 626d7a67-fd2e-4b32-9717-b4e96141d2bc
      - f078724e-7e8c-4144-9fab-749a785646dc
      - 702b01cf-2d9f-40e7-b475-2fffdcc12274
      - 6b841f62-7aa5-46ab-80d1-829e276acd5b
      - 1936c400-dd5d-46e5-86fb-bfa4b10c0fde
      - cec8200a-41ac-43f0-be56-0fda597c3ede
      - ffad9ecc-e69a-41c3-84e3-adfb771f1b1a
      - 1c1932a7-ad07-47e4-8546-b92f73f065f3
      - 18a4d8ac-b64b-4149-b11f-b8104f6ab3a9
      - e4f4d869-6325-42d9-bb19-d6b8b68cd7f2
      - 1c202862-c6fa-4995-ac8c-1b8f5b489f14
      - c5d7c2f6-593f-4c40-bdd9-f68d59b0252b
      - 17295a34-40f2-43ae-808a-06edac0eead3
      - 285695ca-1698-4550-a6d6-401ba9be61f9
      - 4dc56f17-2f66-4ae6-aa5a-a27b1ee178c3
      - 79c1cc50-fece-4a56-9bb3-3672fa91731a
      - 2b68e575-d722-4cc7-b0e1-1a34554a125b
      - d40ab23a-6c55-4cbd-85a1-d54b0cc098c3
      - 9ed72581-c5b9-4f83-8be4-ae3fd60c1e68
      - 5823beab-2ec2-4b7e-ba11-4c41dce6d003
      - 5fde537a-d21f-480a-bb48-adaf600c442e
      - 8e4292b9-1a29-426e-b6ed-745ef4da5eb7
      - d4d11bf3-f5d9-44a3-aa47-b81a78fd56a2
      - 313d6b47-145e-477e-bfb8-de8d450d18bf
      - 94418b69-7838-4368-8815-e5cee9f4b5eb
      - 9d1eb7f4-f953-44e2-8e00-fe08556faa5d
      - dc54e848-2d0e-4912-aa65-62c0bdff6ee4
      - 988d1fc5-aa30-4b73-bcb4-7e60a811f000
      - 1dd225d9-3df4-400e-aac3-f53025a4f0db
      - 009df66b-94ae-41f4-9e49-3fe0aeff8f62
      - e7eb5017-a046-4436-bc07-7999fc777a7c
      - 03cac3a4-58df-44f2-9153-f14e48102d79
      - 6f6a3e61-7c34-4c05-9f5c-4239eec6ee2d
      - 86fb3592-4c4d-403e-b582-e8b4319db248
      - f552502f-331f-41aa-847f-e827b45bee44
      - c3c29eb7-15a7-40aa-a871-672b6a42882a
      - 1ae18613-5dbf-43db-a6d3-5d60db1db49c
      - b68f832f-8fa5-43ff-8e14-98b366321d85
      - 86dc4e1d-a6e6-44ee-8b05-dd34ef8881e1
      - 623ed485-5625-4448-8f6f-ac6239080da3
      - c3930d9c-fac1-48b2-88ad-50ee1349cb3e
      - 908184b5-aa63-4669-8f83-f6fcdae3309d
      - 87122e4b-10aa-4d31-ac96-91fae7fd8c7b
      - 766f6a50-f7a4-4475-980c-9670556d1700
      - db0947b5-dec3-42b5-8da4-b5870455a661
      - 96d9ea8a-bdd1-499c-8857-77fe56a6495a
      - b02c7f71-127a-46e5-9feb-efdc1262a7f8
      - e8628aa9-93d9-4c29-a057-b33a50b7dae3
      - 1d4bed3e-d889-4c22-b77d-73bebfd1f21b
      - 98c7f570-ce47-4100-b5b9-91a06f085293
      - 1754a451-5a3d-47df-aa51-5d166ccc12d5
      - f9b4b5da-a5d5-4a7e-a284-dea830c14d81
      - ba26064e-112b-4f49-ad1d-1ac40dc400e6
      - acdb371b-8d68-41d4-ac18-a756ce8ac1cd
      - f4ec96ae-6bd8-4200-bf94-167fa917aae8
      - 79d922fb-26f8-4324-b0e0-83c12131cd67
      - f740bcfb-fa97-4f5c-bfaf-2dc9486d099a
      - 1c40a7a7-ee62-4593-ad24-3ae3be4294b9
      - d4105a17-cf3e-4a7f-90ed-05b84cee6492
      - 46b1faa0-8d25-430c-8da6-997de058a9ae
      - 3784ee0d-827a-4f6e-81de-185cc1211fe8
      - 6af74382-b547-45dd-b5ee-251648f22eea
      - 2b12342c-d812-4fe9-966e-b5dcc50c6768
      - ee00ffe7-4dba-4d85-94f5-cc788b1294c0
      - aa1b85fb-79c1-405e-8485-c3ad9235554f
      - eb1f5df3-16d7-48a1-bc6c-82746cf9d653
      - df5f3ae9-1e0c-4949-b95d-ee321c2c3408
      - 51f344c1-d056-47ba-a7dc-bde66bdcbe91
      - acc313f3-aa0b-490d-a646-553e6dd3d4c1
      - 01029f67-802f-459c-b6f8-e1b75cf3cb38
      - 039760ee-fd8d-4ced-a678-4c1cf68f4911
      - f5ead4a6-ac1e-49c7-a16a-8b05f046188e
      - 1d6f684a-0c24-4eb4-8975-9335c58558dd
      - ab3c4cfb-f869-49c2-a142-122f7ad3d065
      - 5904c2af-158b-4b0a-b269-6f711c4c0114
      - 62b7fa00-569b-4737-8973-39ae4b373be5
      - 3d8c74d3-7d49-4b73-a60b-278a25bd4ddb
      - 075e9426-dcb6-4965-bc7f-093d7facd093
      - 5b1bfa0d-ab14-4324-b2bd-b842f331883e
      - dd0917ef-ca8f-4ebc-a824-f916aa4c89dd
      - 16749931-0915-488a-a23e-92100d797b04
      - b3e8b99b-9608-4c0c-bc4e-0da0a6d2f53f
      - 5cc2305c-e8b8-4db8-88a1-3799ac9ed5d7
      - 21157089-40f5-454c-87d2-5c6c3e227ff5
      - c398461d-ccef-4493-a31d-8bf801a2d8f8
      - b1f49507-b54f-4ce5-acb5-d24e44602c4d
      - bde4780c-38ce-4bb1-a1bc-29c69b636b59
      - a2e0f406-fdf1-4086-b2a6-471fc0e99a86
      - 066e6595-49a6-4e3e-943e-3f191153c749
      - daddc3ea-98ed-4b9e-972e-7a24d3165975
      - 8989705d-797c-4510-9d13-fbd56e0e64bd
      - e7e61287-4a6a-4912-b11f-902c7337870b
      - 5cb67fef-3104-4de0-a781-ae91694ab578
      - 1aa9d40e-15a2-41c3-bf46-c189b28bf59c
      - 5c343132-f25f-4fbb-b79b-88bbed1c97c5
      - 6a85e10c-aff2-41ae-bfb9-24eb6af6933d
      - 7161a806-3296-40da-9844-40cbe1ff9cdf
      - 904fb45a-a060-405e-a518-21840795bdca
      - 84b84153-e4e6-4583-b7b4-81018f23d5d6
      - ebd07a04-2897-479d-9206-9587c7a535a4
      - 5ed2332e-97ff-44f1-bc2b-df007b0a32dc
      - 7bd9fa0c-fbf4-4581-a05b-171dd1c4ab78
      - 4461bbde-c60d-4101-8af5-a6c2cb16e019
      - e1901530-a7e2-4341-840c-91a545f2a286
      - a838be48-d9e6-4ef8-82c6-a35b2931b46d
      - c7c85e27-0271-47e2-bbe2-7a5f8234f59c
      - 9750dd05-28c5-4e6a-8b98-eb6851c8544a
      - ea31a8e4-1686-4541-a344-22e82b076920
      - 423ca9c2-8dc3-4e0e-8731-3e0519ac50eb
      - 42007743-1629-48c5-a268-898999c98fed
      - 7476ba64-db16-477b-85fb-6faa6809c109
      - 9bfda6f4-dfb6-4967-afbd-f078d0969bee
      - 5df97d3f-fdc7-4d12-8a15-8d1f257fc8c7
      - 5d78a0b1-54dc-4750-963b-a3a89a70c3a9
      - 55bf9fca-f363-4540-96d6-e4de3b47c64e
      - b1c8c0af-d7e6-4123-815a-89324a8e0483
      - f4bc6462-4571-4995-bcc0-bc4ea2be29f3
      - 27b56a4c-fbe7-43b1-ac7e-fedcb5a1b018
      - d73a13bf-92ba-4fbc-8288-7dbeae90985c
      - bc6fda2a-c9ae-444b-9eed-8f333c9227c9
      - 13a422a9-9a38-41f9-96e2-366135a73142
      - a06803ed-3f19-4abe-a3c2-0cdff3ab634a
      - 21b4f099-5a33-4cf3-8a0b-2023ec973381
      - c6babe8e-c646-4d3c-853c-8e7e83e76d29
      - ae0a4238-23d5-4720-8e48-00349756058a
      - b4cc2f12-db02-4310-a591-2de6116b4178
      - 068e6846-f196-4208-878b-4d3c5d15c6bf
      - 36f93bbb-60e0-4f4a-911c-ed3b69913d83
      - a3cb5a74-d2e8-448b-aea0-1524fd22c303
      - ba6b848a-a77e-4621-823b-7c595c22bccd
      - dde162e5-a333-4682-82f0-de36474cb4b5
      - 4532f90e-d145-41d0-b45e-c254a4c05847
      - a16e6886-d52e-4ace-9183-b818aa40ece7
      - 673eace9-6bdb-4996-a865-f5f522879751
      - 6fa2f20d-e90c-4b9b-a851-bdbe64e5ff5a
      - 48130bd1-dd6e-4d5a-a073-634c71312ee2
      - 3f4341eb-5c74-4de3-b1fb-cbed079dc2cb
      - e3b17414-c1a7-40b2-a273-44066e4dee06
      - 8bc5bab9-b7b8-4b17-bc4e-b760bba099ca
      - a65d63af-b581-4201-ae11-71954bdbabfd
      - 82886ca2-aa2d-4a81-aba7-c305cf33028e
      - 4c7eb3ff-d560-47e6-8ab5-7eda6e13c643
      - 23309f5d-62de-45bc-be16-f1a5d20fad26
      - 6d87061b-8d5f-4be9-9bc6-2525782b0a82
      - f7aa3aa5-d34b-4051-a703-b72bcd2d5439
      - 50bcf207-7f83-4038-9348-672f81109102
      - 718a8f0c-7d88-4d14-ac98-0dc3a36d8b2d
      - 6c326e13-6839-46a7-83fa-72c0c1481cd2
      - 5bd0a5e8-0f36-46cb-b40d-31388c596c43
      - 4d25425b-6fdd-4793-bbc6-c910ce78c4e9
      - 126fb7bb-ed0a-4788-843f-b6d55bef3583
      - ae36bd36-53f8-49db-b61f-f0c137328c96
      - a51de452-742a-41ed-82d3-6bdfa2770e44
      - 9ee5e169-539c-4868-b3e7-b8c602319b01
      - 7f575e13-a863-499d-b4fa-bbfbc40c0938
      - e8bafa27-e0cb-4dce-8320-19921cbccc4e
      - 6c94ac9f-ecbe-43e7-9113-0a65786e8990
      - bb6254a4-8132-49c1-8742-ff55f83c3639
      - f294c7e5-e54d-4d58-a345-ecf86e000761
      - 8695a688-1492-4938-b209-17ddb081654b
      - 91fa8aae-dc41-420e-93b4-17bc8d00ce53
      - dd80f6ac-96df-423c-a581-51af9d8a00ae
      - 15a70445-30b2-4313-9cf1-edd785160b0d
      - 19e6260e-c91e-4ebc-9b57-62e23c38be06
      - db68b897-6759-458f-a328-1d4f58a68617
      - 65e2f102-260b-4ed4-ae96-b6ba27539343
      - 37e4dcde-168e-4398-853e-daf843e852ec
      - dbc3f6d0-5594-4486-b579-11d61933e0fc
      - 9eb1ccc6-35b8-4cf0-86e9-d8d61abe27e5
      - 4c298460-3553-43dd-a5e1-454061f9a5ed
      - 98950c62-8dd7-4433-9446-129390e47d34
      - f877668d-4ebe-4983-92be-57ffb75ce608
      - 43013fde-e2f3-47a7-8282-7987699dad6d
      - 42018a4a-007d-4900-aaf7-d7635fba884f
      - 0580c76c-c75c-497b-92df-7ea8b3c5d75b
      - 0b92603f-d8df-48bf-a63f-10f7b836a6d6
      - 771afa92-017a-4808-b0b1-f7f67555c999
      - 14a31d54-b8d2-43ec-a2bb-6cbd52d38d03
      - f316885a-a44a-4c91-8680-89293bbefb84
      - cd2a7e75-d14f-41b0-9988-72a6c0f9f303
      - fda50d26-bd32-4b19-85c8-870aae4b97a8
      - a185e258-d41a-4f93-862d-fc360de10a14
      - 379919f4-3ec1-4166-9807-6fb44df54624
      - 392e34df-ba17-45ed-9bfd-54dc3ac3d8e7
      - 34144d2c-4b81-4f4a-b4d6-6daa1d7b9837
      - a1e6b2d7-b363-42b1-b7a5-6f005d4b6eed
      - eb77bdf5-e34d-45b8-b066-6256a2019b74
      - bc35eaa6-3ad5-4fbb-a9d4-d4a33b57ef92
      - b6eb8491-22ac-42f2-8008-98e603f8a97d
      - 9403c29c-cea9-4a32-899f-81115841d8f4
      - 79e730cd-34e0-475f-999d-05caacff1690
      - 072186e8-0993-4a3d-978c-d88cdc374df7
      - b3fa3d16-5ac3-418b-960c-bf7e42fb370f
      - 53757df9-6059-4677-8ac0-33c0360e1816
      - 764256b7-d011-44fd-9c22-aac06d136990
      - b548cfbe-11e9-473d-ac0f-1f929689a987
      - 68e8a3af-fe54-4497-84bc-bf7b6dd06cb4
      - a7d76d4b-7d43-4070-83fd-525f47eb16f7
      - 5a501d32-b9d0-4975-a599-dd2b654cf15a
      - 7645ae4b-ef72-4041-a4bf-0485bc6a3954
      - 2fe484f9-e78b-46bb-89a9-882728c41329
      - 29ab99b4-77c7-47a6-a1fd-9b31cfb7d90a
      - 75a401c8-de47-4aa1-b5b0-17b5b12c2446
      - e41f940d-4ed6-42fc-9da0-5d78a834f07d
      - 2e3951a4-c741-48ae-bcf1-0917fa30932f
      - d5bb176c-94fe-4db5-8949-adc227e880e8
      - 672aa1a9-658c-4844-aae7-bf6d5229a5ef
      - 7535b0da-48c4-45dd-91e3-2b28df783d0d
      - 98183ec3-e8d8-457b-9494-31581bf2d34d
      - 49483463-8b31-45fe-9f23-11f9d95a8e4a
      - e3cb705b-c81c-434c-a8b7-a46a1e9caf38
      - f822bc74-f191-44c8-a9e5-6b397337bdd6
      - c53aebf0-83d6-41cd-8361-614352e92797
      - 93827c93-86bf-4507-96bc-324e5eaa0311
      - 1b8c756a-7c75-4df6-ab08-0872d2af0c2d
      - e113ed10-86e7-457e-ae9e-368f1316ee2b
      - 34dedd5a-4085-4c82-905d-42c361d6ab6b
      - e182451e-b707-42af-8a39-2a1201b1b588
      - 37c4528a-306e-4528-a716-45cc01a8b30c
      - 6c6c0170-6985-41b0-a4a2-9ea22d9f33fc
      - 43108c1c-512a-4112-ab3e-62546eff17c5
      - 9eb62bcf-7c37-46ae-9ae0-3e12c9af7fa6
      - a9bdbeac-b7cb-4b85-ab95-e290bd989f41
      - 0f99a59a-e650-4c13-8df6-6131cf973a68
      - eded64ab-f9f8-4c03-ac39-77bb5bd8a432
      - fc6226cd-db29-4adc-9e8a-2aa7ab201565
      - 649b1259-5104-4c64-9473-4a8c27921d6b
      - 3a0e4b02-d79a-412b-88e8-307431de49df
      - 27ad539f-acc3-48e7-9f3a-2bbeb65e1bfa
      - 249d4f18-14c1-4a46-a4f6-dfbc718f7fc3
      - 0e669bae-6881-459f-a602-b8ae08fe9fdb
      - 589e7b47-f3c3-46da-8385-81b030a605fe
      - a1620246-d45d-47fc-b538-1cc1f75f0717
      - d9c4be32-8d1d-4fd5-8cba-7967b349faa7
      - 8c08c65c-bbe4-4d70-b53b-6ef3605c486d
      - db2fdda3-a06b-45d9-b682-a0d2a3812c14
      - 015e3156-b03f-4843-83c9-64e429db4e5e
      - 79e6d82f-a3ac-4167-aff2-3997753f4399
      - e8da6d70-eeae-44fc-97b7-66ac3b0399f0
      - f6f1732a-2069-470b-adff-146f1f6ec7cc
      - bf58492f-ef55-48ee-9219-47e1e1d7c0e7
      - 52902e45-22c9-46d9-84bc-74e6f6ceb46e
      - 01ccee73-98dc-4ada-bc6e-385ad54f1fb9
      - 266ff977-ef04-45e6-a299-f63eea6b5671
      - 6d012992-02c1-4c1f-b43c-d52e8f39bf9d
      - bdbeb8fa-013c-4ad3-bab5-f8350f5436f3
      - 38287944-cfd6-4476-8733-0fb9db5faf61
  Subgraph-93:
    id: "93"
    name: Customer 55x
    steps:
      - 1aa9d40e-15a2-41c3-bf46-c189b28bf59c
      - 1ec7e46c-bc52-4f66-895b-46b47bacc332
      - 21aeab8d-b6ab-4dc0-8199-fe16963fb7bf
      - 22fcfbc3-6f90-477b-b70a-cc8124fb889a
      - 2671e054-9410-4a7e-a5d0-4852da5d60a8
      - 29ab99b4-77c7-47a6-a1fd-9b31cfb7d90a
      - 2d783afe-b566-497d-b872-0085c5a2822b
      - 2e3951a4-c741-48ae-bcf1-0917fa30932f
      - 2fe484f9-e78b-46bb-89a9-882728c41329
      - 31c18423-dd89-4d2e-99f1-d1fb69e2fa62
      - 3438b190-c041-4520-944b-74ec38e7ea64
      - 383d3aac-06fc-443a-9bb0-4475f748cf12
      - 4344b8e5-d14e-4f65-9dc5-6b47e5abc83f
      - 4461bbde-c60d-4101-8af5-a6c2cb16e019
      - 45e160d2-886b-4e3f-8b7c-c8b83fd645e6
      - 52f071fd-6c77-4515-86e9-204eb0b5d364
      - 58af5a2f-2858-4183-bf50-d181369dc08e
      - 5a501d32-b9d0-4975-a599-dd2b654cf15a
      - 5c343132-f25f-4fbb-b79b-88bbed1c97c5
      - 5ddf5f53-8ff2-40ba-907e-5216592214d3
      - 5ed2332e-97ff-44f1-bc2b-df007b0a32dc
      - 626d7a67-fd2e-4b32-9717-b4e96141d2bc
      - 68e8a3af-fe54-4497-84bc-bf7b6dd06cb4
      - 6a85e10c-aff2-41ae-bfb9-24eb6af6933d
      - 6bd96b4f-2650-4efc-8b44-93768399fab1
      - 702b01cf-2d9f-40e7-b475-2fffdcc12274
      - 7161a806-3296-40da-9844-40cbe1ff9cdf
      - 7345b48b-ba6f-4253-b71e-9573b6e3e01b
      - 75a401c8-de47-4aa1-b5b0-17b5b12c2446
      - 7645ae4b-ef72-4041-a4bf-0485bc6a3954
      - 7a197a0d-2e0b-4407-94ed-dce8db361260
      - 7bd9fa0c-fbf4-4581-a05b-171dd1c4ab78
      - 84b84153-e4e6-4583-b7b4-81018f23d5d6
      - 904fb45a-a060-405e-a518-21840795bdca
      - 95278123-c6b2-4a87-88ef-053ffcd2c15c
      - a5aac1ab-856f-49ff-8bb8-7f46ac18794c
      - a7d76d4b-7d43-4070-83fd-525f47eb16f7
      - ab283428-0d0f-4f20-81e1-b82447ce4737
      - b0e039cb-e89a-45e0-8f98-200785bca16c
      - b548cfbe-11e9-473d-ac0f-1f929689a987
      - b6f57dc0-ad23-4ce9-a16f-747913d520a3
      - bf037139-aac8-4d8a-837f-60ee38c02313
      - d0a63d7e-631f-4ab6-a73c-636e9c805cca
      - e04af7ce-b827-44f3-94b4-9f3d98502321
      - e41f940d-4ed6-42fc-9da0-5d78a834f07d
      - e5257b17-5936-4493-aee6-9ae514c0b77d
      - ebd07a04-2897-479d-9206-9587c7a535a4
      - f078724e-7e8c-4144-9fab-749a785646dc
      - f105afa5-7af1-4a9a-9c7f-3a6be5c3f9d7
      - fc54e9f6-1875-44fd-bac1-810d252f4f22
  Subgraph-94:
    id: "94"
    name: New Subgraph
    steps:
      - f294c7e5-e54d-4d58-a345-ecf86e000761
      - 98950c62-8dd7-4433-9446-129390e47d34
      - f740bcfb-fa97-4f5c-bfaf-2dc9486d099a
      - cccf834a-1a14-44dc-8a88-bb4b96812640
      - 96b4e9e6-6651-4367-a3c9-fea0376bc595
      - acc313f3-aa0b-490d-a646-553e6dd3d4c1
      - eca4f5b3-aad8-422b-92af-760f38e4e214
      - 9b9ece04-5620-44d2-a873-d140be2c3f8b
      - de688fc6-61ff-479a-98ee-253ffd533813
      - fc40ee92-07a1-41cc-9757-7ca62d948ff6
version: 2
